<?php
namespace FlowerTest\Person\Identical;

use Flower\Hash\Hash1;
use Flower\Person\Identical\Email;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-27 at 22:16:47.
 */
class EmailTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Email
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Email;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\Person\Identical\Email::__toString
     */
    public function test__toString()
    {
        $identity = 'foo@example.com';
        $this->object->setIdentity($identity);
        $this->assertEquals($identity, $this->object->__toString());
    }

    /**
     * @covers Flower\Person\Identical\Email::getCredential
     * @covers Flower\Person\Identical\Email::setCredential
     */
    public function testSetGetCredential()
    {
        $this->object->setCredential('foo');
        $this->assertEquals('foo', $this->object->getCredential());
    }

    /**
     * @covers Flower\Person\Identical\Email::getIdentifier
     */
    public function testGetIdentifier()
    {
        $this->assertEquals(array('email'), $this->object->getIdentifier());
    }

    /**
     * @covers Flower\Person\Identical\Email::setIdentity
     * @covers Flower\Person\Identical\Email::getIdentity
     */
    public function testSetGetIdentity()
    {
        $identity = 'foo';
        $this->object->setIdentity($identity);
        $this->assertEquals($identity, $this->object->getIdentity());
    }

    /**
     * @covers Flower\Person\Identical\Email::setPersonId
     * @covers Flower\Person\Identical\Email::getPersonId
     */
    public function testSetGetPersonId()
    {
        $personId = 123;
        $this->object->setPersonId($personId);
        $this->assertEquals($personId, $this->object->getPersonId());
    }

    public function testSetPersonIdAffectsInnerPersonId()
    {
        $personId = 123;
        $this->object->setPersonId($personId);
        $this->assertEquals($personId, $this->object->person_id);
    }

    /**
     * @covers Flower\Person\Identical\Email::setRoles
     * @covers Flower\Person\Identical\Email::getRoles
     */
    public function testSetGetRoles()
    {
        $roles = array('foo');

        $this->object->setRoles($roles);
        $this->assertEquals($roles, $this->object->getRoles());
    }

    /**
     * @covers Flower\Person\Identical\Email::newCredential
     */
    public function testNewCredential()
    {
        $password = $this->object->newCredential();
        $matches = array();
        $this->assertEquals(1, preg_match('/^[a-z][]a-zA-Z0-9#$-=?@[_]{9}$/', $password, $matches));
        $this->assertEquals($matches[0], $password);
        $this->assertEquals(Hash1::hash($password), $this->object->getCredential());
    }

    /**
     * @covers Flower\Person\Identical\Email::setPlainCredential
     */
    public function testSetPlainCredential()
    {
        $password = 'foo';
        $this->object->setPlainCredential($password);
        $this->assertEquals(Hash1::hash($password), $this->object->getCredential());
    }

}
