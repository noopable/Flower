<?php
namespace FlowerTest\Person;

use Flower\Person\Identical\Email;
use Flower\Person\Person;
use Flower\Test\TestTool;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-27 at 22:16:58.
 */
class PersonTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Person
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Person;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\Person\Person::getIdentifier
     */
    public function testGetIdentifier()
    {
        $this->assertEquals(array('person_id'), $this->object->getIdentifier());
    }

    /**
     * @covers Flower\Person\Person::getPersonId
     */
    public function testSetGetPersonId()
    {
        $personId = 123;
        $this->object->setPersonId($personId);
        $this->assertEquals($personId, $this->object->getPersonId());
        $this->assertEquals($personId, $this->object->person_id);
    }

    /**
     * @covers Flower\Person\Person::addEmail
     */
    public function testAddEmail()
    {
        $personId = 123;
        $email = $this->getMock('Flower\Person\Identical\Email');
        $email->expects($this->once())
                ->method('setPersonId')
                ->with($this->equalTo($personId));
        $this->object->setPersonId($personId);
        $this->object->addEmail($email);
        $this->assertContains($email, TestTool::getPropertyValue($this->object, 'emails'));
    }

    /**
     * @covers Flower\Person\Person::getEmails
     */
    public function testGetEmails()
    {
        $personId = 123;
        $email = $this->getMock('Flower\Person\Identical\Email');
        $email->expects($this->once())
                ->method('getIdentity')
                ->will($this->returnValue('foo@example.com'));
        $this->object->setPersonId($personId);
        $this->object->addEmail($email);
        $this->assertEquals(array('foo@example.com' => $email), $this->object->getEmails());
    }

    /**
     * @covers Flower\Person\Person::removeEmail
     */
    public function testRemoveEmail()
    {
        $email = new Email;
        $email->setIdentity('foo@example.com');
        $this->object->setPersonId(123);
        $this->object->addEmail($email);
        $this->object->removeEmail($email);
        $this->assertEmpty(TestTool::getPropertyValue($this->object, 'emails'));
    }
}
