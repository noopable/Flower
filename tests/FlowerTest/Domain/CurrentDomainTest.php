<?php
namespace FlowerTest\Domain;

use Flower\Domain\CurrentDomain;
use Flower\Domain\Service;
use Flower\Exception\DomainException;
use Flower\Test\TestTool;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-25 at 00:10:03.
 */
class CurrentDomainTest extends \PHPUnit_Framework_TestCase
{
    protected $service;
    /**
     * @var CurrentDomain
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->service = new Service;
        $this->object = new CurrentDomain($this->service);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\Domain\CurrentDomain::__construct
     */
    public function testConstructorBinding()
    {
        $this->assertSame($this->object, $this->service->getCurrentDomain());
    }
    
    /**
     * @covers Flower\Domain\CurrentDomain::setDomainId
     */
    public function testSetDomainId()
    {
        $domainId = 123;
        $this->object->setDomainId($domainId);
        $this->assertEquals($domainId, TestTool::getPropertyValue($this->object, 'domainId'));
    }

    /**
     * @expectedException Flower\Exception\DomainException
     */
    public function testSetDomainIdOverride()
    {
        $domainId = 123;
        $this->object->setDomainId($domainId);
        $this->object->setDomainId(456);
    }

    /**
     * @depends testSetDomainId
     * @covers Flower\Domain\CurrentDomain::getDomainId
     */
    public function testGetDomainId()
    {
        $domainId = 123;
        $this->object->setDomainId($domainId);
        $this->assertEquals($domainId, $this->object->getDomainId());
    }

    /**
     * @covers Flower\Domain\CurrentDomain::setDomainName
     */
    public function testSetDomainName()
    {
        $domainName = 'example.com';
        $this->object->setDomainName($domainName);
        $this->assertEquals($domainName, TestTool::getPropertyValue($this->object, 'domainName'));
    }

    /**
     * @expectedException Flower\Exception\DomainException
     */
    public function testSetDomainNameImmutable()
    {
        $domainName = 'example.com';
        $this->object->setDomainName($domainName);
        $this->object->setDomainName('example.co.jp');
    }

    /**
     * @covers Flower\Domain\CurrentDomain::getDomainName
     */
    public function testGetDomainName()
    {
        $domainName = 'example.com';
        $this->object->setDomainName($domainName);
        $this->assertEquals($domainName, TestTool::getPropertyValue($this->object, 'domainName'));
    }
}
