<?php

namespace FlowerTest;
/*
 *
 *
 * @copyright Copyright (c) 2013-2013 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */
use Flower\RecursivePriorityQueue;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-05 at 13:18:14.
 */
class RecursivePriorityQueueTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var RecursivePriorityQueue
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new RecursivePriorityQueue;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Flower\RecursivePriorityQueue::insert
     */
    public function testInsert() {
        $data = 'foo';
        $this->object->insert($data);
        //$this->object->rewind();
        $this->assertEquals($data, $this->object->current());
    }

    /**
     * @covers Flower\RecursivePriorityQueue::remove
     */
    public function testRemove() {
        $data = 'foo';
        $this->object->insert($data);
        $this->object->remove($data);
        $this->assertNull($this->object->current());
    }

    /**
     * @covers Flower\RecursivePriorityQueue::current
     */
    public function testCurrent() {
        
        $this->assertNull($this->object->current());
        $data = 'foo';
        $this->object->insert($data);
        $this->assertEquals($data, $this->object->current());
    }

    /**
     * @covers Flower\RecursivePriorityQueue::getChildren
     */
    public function testGetChildren() {
        $child = new RecursivePriorityQueue;
        $data  = 'foo';
        $child->insert($data);
        $this->object->insert($child);
        $this->assertEquals($data, $this->object->getChildren()->current());
    }

    /**
     * @covers Flower\RecursivePriorityQueue::hasChildren
     */
    public function testHasChildrenDefault() {
        $child = new RecursivePriorityQueue;
        $child2 = new RecursivePriorityQueue;
        $data  = 'foo';
        $child->insert('bar');
        $this->object->insert($child);
        $this->object->insert($child2);
        $this->object->insert($data);
        
        //子のいるキュー
        $this->assertTrue($this->object->hasChildren());
        
        $this->object->next();
        //子のいないキュー        
        $this->assertTrue($this->object->hasChildren());
        
        $this->object->next();
        //スカラーデータ
        $this->assertFalse($this->object->hasChildren());
    }
    
    /**
     * @covers Flower\RecursivePriorityQueue::hasChildren
     */
    public function testHasChildrenStrictContains() {
        $parent = new RecursivePriorityQueue(RecursivePriorityQueue::HAS_CHILDREN_STRICT_CONTAINS);
        $child  = new RecursivePriorityQueue(RecursivePriorityQueue::HAS_CHILDREN_STRICT_CONTAINS);
        $child2 = new RecursivePriorityQueue(RecursivePriorityQueue::HAS_CHILDREN_STRICT_CONTAINS);
        $data  = 'foo';
        $child->insert('bar');
        $parent->insert($child);
        $parent->insert($child2);
        $parent->insert($data);
        
        $parent->rewind();
        //子のいるキュー
        $this->assertTrue($parent->hasChildren());
        
        $parent->next();
        //子のいないキュー        
        $this->assertFalse($parent->hasChildren());
        
        $parent->next();
        //スカラーデータ
        $this->assertFalse($parent->hasChildren());
    }
    /**
     * @covers Flower\RecursivePriorityQueue::key
     * @todo   Implement testKey().
     */
    public function testKey() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\RecursivePriorityQueue::next
     * @todo   Implement testNext().
     */
    public function testNext() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\RecursivePriorityQueue::rewind
     * @todo   Implement testRewind().
     */
    public function testRewind() {
        $child = new RecursivePriorityQueue;
        $data  = 'foo';
        $child->insert('bar');
        $this->object->insert($child);
        $this->object->insert($data);
        $this->assertTrue($this->object->hasChildren());
        $this->object->next();
        $this->assertFalse($this->object->hasChildren());
        $this->object->rewind();
        $this->assertTrue($this->object->hasChildren());
    }

    /**
     * @covers Flower\RecursivePriorityQueue::valid
     * @todo   Implement testValid().
     */
    public function testValid() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
