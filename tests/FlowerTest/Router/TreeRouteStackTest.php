<?php
namespace FlowerTest\Router;

use Flower\Router\TreeRouteStack;
use Flower\Test\TestTool;
use Zend\Mvc\Router\RoutePluginManager;
use Zend\ServiceManager\ServiceManager;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-23 at 17:18:40.
 */
class TreeRouteStackTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var TreeRouteStack
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->serviceLocator = new ServiceManager();
        $this->routePluginManager = $routePluginManager = new RoutePluginManager;
        $routePluginManager->setServiceLocator($this->serviceLocator);
        $this->serviceLocator->setService('RoutePluginManager', $routePluginManager);
        $this->object = TreeRouteStack::factory(array('route_plugins' => $routePluginManager));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\Router\TreeRouteStack::getPrototypes
     */
    public function testGetPrototypes()
    {
        $prototypes = array(
            'foo' => array(
                'type' => 'literal',
                'options' => array('route' => 'Foo'),
            ),
            'bar' => array(
                'type' => 'segment',
                'options' => array('route' => 'blog'),
            ),
        );
        $this->object->addPrototypes($prototypes);
        $res = $this->object->getPrototypes();
        $this->assertInstanceOf('ArrayObject', $res);
        $resArray = $res->getArrayCopy();
        $this->assertArrayHasKey('foo', $resArray );
        $this->assertArrayHasKey('bar', $resArray );
        $this->assertInstanceOf('Zend\Mvc\Router\Http\Literal', $res['foo']);
        $this->assertInstanceOf('Zend\Mvc\Router\Http\Segment', $res['bar']);
    }

    public function testInit()
    {
        $this->assertFalse($this->routePluginManager->has('lazyResource'));
        $this->assertFalse($this->routePluginManager->has('lazyFile'));
    }

    public function testInitIntegrated()
    {
        $config = array(
            'flower_lazy_load_route_file' => array(),
            'flower_lazy_load_route_resource' => array(),
        );
        $serviceLocator = new ServiceManager();
        $serviceLocator->setService('Config', $config);
        $routePluginManager = new RoutePluginManager;
        $routePluginManager->setServiceLocator($serviceLocator);
        //@see module.config.php
        $serviceLocator->setFactory('Flower_LazyRouteLoaderResource', 'Flower\Router\LazyRouteLoaderResourceFactory');
        $serviceLocator->setFactory('Flower_LazyRouteLoaderFile', 'Flower\Router\LazyRouteLoaderFileFactory');
        $serviceLocator->setService('RoutePluginManager', $routePluginManager);
        $this->object = TreeRouteStack::factory(array('route_plugins' => $routePluginManager));
        $this->assertArrayHasKey('chain', TestTool::getPropertyValue($routePluginManager, 'invokableClasses'));
    }
}
