<?php
namespace FlowerTest\EventManager;

use Flower\EventManager\Event\EventPluginManager;
use Flower\EventManager\RegistryEventManager;
use Flower\Test\TestTool;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-24 at 10:02:49.
 */
class RegistryEventManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var RegistryEventManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new RegistryEventManager;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\EventManager\RegistryEventManager::triggerIdentifier
     */
    public function testTriggerIdentifierMinimum()
    {
        $identifier = 'dummy';
        $event = $this->getMock('Zend\EventManager\EventInterface');
        $res = $this->object->triggerIdentifier($identifier, $event);
        $this->assertInstanceOf('Zend\EventManager\ResponseCollection', $res);
    }

    public function testTriggerIdentifierWithListener()
    {
        $event = $this->getMock('Zend\EventManager\Event');
        $event->expects($this->any())
                ->method('getName')
                ->will($this->returnValue('event_name'));
        $response = 'result';
        $listener = $this->getMock('stdClass', array('onEvent'));
        $listener->expects($this->once())
                ->method('onEvent')
                ->with($this->identicalTo($event))
                ->will($this->returnValue($response));
        $callback = array($listener, 'onEvent');
        $eventManager = $this->object->getEventManager();
        $sharedEventManager = $eventManager->getSharedManager();
        $sharedEventManager->attach(array('foo'), 'event_name', $callback, $priority = 1);
        $this->object->triggerIdentifier('foo', $event);
    }

    /**
     * @covers Flower\EventManager\RegistryEventManager::notify
     */
    public function testNotify()
    {
        $identifier = 'raise identifier';
        $id = 'bar';
        $action ='update';
        $name = $identifier . '/' . $id . '.' . $action;
        $info = array(
            array(
                'name' => 'foo',
                'params' => 'event_name',
            ),
        );
        $registry = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $registry->expects($this->once())
                ->method('read')
                ->with($this->equalTo($name))
                ->will($this->returnValue($info));
        $this->object->setRegistry($registry);
        $eventPlugins = new EventPluginManager;
        $eventPlugins->setInvokableClass('foo', 'Zend\EventManager\Event');
        $this->object->setEventPluginManager($eventPlugins);
        $response = 'result';
        $listener = $this->getMock('stdClass', array('onEvent'));
        $listener->expects($this->once())
                ->method('onEvent')
                ->with($this->isInstanceOf('Zend\EventManager\Event'))
                ->will($this->returnValue($response));
        $callback = array($listener, 'onEvent');
        $eventManager = $this->object->getEventManager();
        $sharedEventManager = $eventManager->getSharedManager();
        $sharedEventManager->attach(array('foo'), 'event_name', $callback, $priority = 1);

        $this->object->notify($identifier, $id, $action);

    }

    /**
     * @covers Flower\EventManager\RegistryEventManager::setEventPluginManager
     */
    public function testSetEventPluginManager()
    {
        $eventPluginManager = $this->getMock('Flower\EventManager\Event\EventPluginManager');
        $this->object->setEventPluginManager($eventPluginManager);
        $this->assertSame($eventPluginManager, TestTool::getPropertyValue($this->object, 'eventPluginManager'));
    }

    /**
     * @covers Flower\EventManager\RegistryEventManager::getEventPluginManager
     */
    public function testGetEventPluginManager()
    {
        $eventPluginManager = $this->getMock('Flower\EventManager\Event\EventPluginManager');
        $this->object->setEventPluginManager($eventPluginManager);
        $this->assertSame($eventPluginManager, $this->object->getEventPluginManager());
    }

    /**
     * @covers Flower\EventManager\RegistryEventManager::setRegistry
     */
    public function testSetRegistry()
    {
        $registry = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $this->object->setRegistry($registry);
        $this->assertSame($registry, TestTool::getPropertyValue($this->object, 'registry'));
    }

    /**
     * @covers Flower\EventManager\RegistryEventManager::getRegistry
     */
    public function testGetRegistry()
    {
        $registry = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $this->object->setRegistry($registry);
        $this->assertSame($registry, $this->object->getRegistry());
    }

    /**
     * @covers Flower\EventManager\RegistryEventManager::getInfo
     */
    public function testGetInfo()
    {
        $identifier = 'foo';
        $id = 'bar';
        $action = 'update';
        $name = $identifier . '/' . $id . '.' . $action;
        $info = array('action' => 'refresh');
        $registry = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $registry->expects($this->once())
                ->method('read')
                ->with($this->equalTo($name))
                ->will($this->returnValue($info));
        $this->object->setRegistry($registry);
        $res = $this->object->getInfo($identifier, $id, $action);
        $this->assertEquals($info, $res);
    }

    /**
     * @covers Flower\EventManager\RegistryEventManager::setEventManager
     */
    public function testSetEventManager()
    {
        $eventManager = $this->getMock('Zend\EventManager\EventManager');
        $this->object->setEventManager($eventManager);
        $this->assertSame($eventManager, TestTool::getPropertyValue($this->object, 'events'));
    }

    /**
     * @covers Flower\EventManager\RegistryEventManager::getEventManager
     */
    public function testGetEventManager()
    {
        $eventManager = $this->getMock('Zend\EventManager\EventManager');
        $this->object->setEventManager($eventManager);
        $this->assertSame($eventManager, $this->object->getEventManager());
    }
}
