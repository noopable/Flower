<?php
namespace Flower\EventManager\Service;

use Flower\EventManager\Service\RegistryEventManagerFactory;
use Flower\Test\TestTool;
use Zend\ServiceManager\ServiceManager;
use Zend\Mvc\Service\ServiceManagerConfig;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-24 at 10:03:13.
 */
class RegistryEventManagerFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var RegistryEventManagerFactory
     */
    protected $object;

    protected $configKey;

    protected $registryServiceName;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new RegistryEventManagerFactory;
        $this->configKey = TestTool::getPropertyValue($this->object, 'configKey');
        $this->registryServiceName = TestTool::getPropertyValue($this->object, 'registryServiceName');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * サービスとして登録してあるが設定がなく使用する意図がない場合
     *
     * @covers Flower\EventManager\Service\RegistryEventManagerFactory::createService
     */
    public function testCreateServiceWithoutConfig()
    {
        $serviceLocator = new ServiceManager;
        $this->assertNull($this->object->createService($serviceLocator));
    }

    /**
     * サービスとして登録してあり、使用する意図があるが、設定が不足している場合
     *
     * @expectedException Flower\EventManager\Exception\RuntimeException
     */
    public function testCreateServiceLackOfConfig()
    {
        $serviceLocator = new ServiceManager;
        $config = array($this->configKey => array());
        $serviceLocator->setService('Config', $config);
        $this->object->createService($serviceLocator);
    }

    public function testCreateServiceWithMinimumConfiguration()
    {
        $serviceLocator = new ServiceManager(new ServiceManagerConfig);
        $config = array(
            $this->configKey => array(
            ),
        );
        $registry = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $serviceLocator->setService('Config', $config);
        $serviceLocator->setService($this->registryServiceName, $registry);

        $res = $this->object->createService($serviceLocator);
        $this->assertInstanceOf('Flower\EventManager\RegistryEventManager', $res);
    }

    public function testCreateServiceWithExampleServiceConfig()
    {
        $serviceLocator = new ServiceManager(new ServiceManagerConfig);
        $config = array(
            $this->configKey => array(
                'event_plugins' => array(
                    //'invokables' => array('Zend\EventManager\Event' => 'Zend\EventManager\Event'),
                    'aliases' => array('foo' => 'Zend\EventManager\Event'),
                ),
            ),
        );
        $registry = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $serviceLocator->setService('Config', $config);
        $serviceLocator->setService($this->registryServiceName, $registry);

        $registryEventManager = $this->object->createService($serviceLocator);
        $this->assertInstanceOf('Flower\EventManager\RegistryEventManager', $registryEventManager);
        $options = array(
            'name' => 'event_name',
            'target' => 'test_target',
            'params' => array(
                'foo' => 'bar',
            ),
        );
        $event = $registryEventManager->getEventPluginManager()->get('foo', $options);
        $this->assertInstanceOf('Zend\EventManager\Event', $event);
        $this->assertEquals('event_name', $event->getName());
        $this->assertEquals(array('foo' => 'bar'), $event->getParams());
        $this->assertEquals('test_target', $event->getTarget());
    }

    public function testShareMvcSharedManager()
    {
        $serviceLocator = new ServiceManager(new ServiceManagerConfig);
        $config = array(
            $this->configKey => array(
            ),
        );
        $sharedManager = $serviceLocator->get('SharedEventManager');
        $registry = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $serviceLocator->setService('Config', $config);
        $serviceLocator->setService($this->registryServiceName, $registry);

        $res = $this->object->createService($serviceLocator);
        $this->assertSame($sharedManager, $res->getSharedEventManager());
    }

    public function testCallbacksWithClosure()
    {
        $serviceLocator = new ServiceManager(new ServiceManagerConfig);
        $config = array(
            $this->configKey => array(
                'callbacks' => array(
                    array(
                        'identifier' => 'foo',
                        'event' => 'update',
                        'callback' => function() {return null;}
                    ),
                ),
            ),
        );
        $registry = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $serviceLocator->setService('Config', $config);
        $serviceLocator->setService($this->registryServiceName, $registry);

        $manager = $this->object->createService($serviceLocator);
        $this->assertInstanceOf('Flower\EventManager\RegistryEventManager', $manager);
        $sharedEventManager = $manager->getSharedEventManager();
        $listeners = $sharedEventManager->getListeners('foo', 'update');
        $this->assertCount(1, $listeners);
        $this->assertInstanceOf('Closure', $listeners->top()->getCallback());
    }

    public function testCallbacksWithCallbackServiceName()
    {
        $serviceLocator = new ServiceManager(new ServiceManagerConfig);
        $config = array(
            $this->configKey => array(
                'callbacks' => array(
                    array(
                        'identifier' => 'foo',
                        'event' => 'update',
                        'callback' => 'closure_service'
                    ),
                ),
            ),
        );
        $serviceLocator->setService('closure_service', function (){return;});
        $registry = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $serviceLocator->setService('Config', $config);
        $serviceLocator->setService($this->registryServiceName, $registry);

        $manager = $this->object->createService($serviceLocator);
        $this->assertInstanceOf('Flower\EventManager\RegistryEventManager', $manager);
        $sharedEventManager = $manager->getSharedEventManager();
        $listeners = $sharedEventManager->getListeners('foo', 'update');
        $this->assertCount(1, $listeners);
        $this->assertInstanceOf('Closure', $listeners->top()->getCallback());
    }

    public function testCallbacksWithCallbackObjectWithMethod()
    {
        $serviceLocator = new ServiceManager(new ServiceManagerConfig);
        $callback = $this->getMock('stdClass', array('doSomething'));
        $config = array(
            $this->configKey => array(
                'callbacks' => array(
                    array(
                        'identifier' => 'foo',
                        'event' => 'update',
                        'callback' => 'callback_service',
                        'callback_method' => 'doSomething',
                    ),
                ),
            ),
        );
        $serviceLocator->setService('callback_service', $callback);
        $registry = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $serviceLocator->setService('Config', $config);
        $serviceLocator->setService($this->registryServiceName, $registry);

        $manager = $this->object->createService($serviceLocator);
        $this->assertInstanceOf('Flower\EventManager\RegistryEventManager', $manager);
        $sharedEventManager = $manager->getSharedEventManager();
        $listeners = $sharedEventManager->getListeners('foo', 'update');
        $this->assertCount(1, $listeners);
        $this->assertInstanceOf('stdClass', $listeners->top()->getCallback()[0]);
    }
}
