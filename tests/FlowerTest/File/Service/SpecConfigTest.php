<?php

namespace FlowerTest\File\Service;
/*
 *
 *
 * @copyright Copyright (c) 2013-2014 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */
use Flower\File\Service\SpecConfig;

use FlowerTest\Bootstrap;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-18 at 09:10:38.
 */
class SpecConfigTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var SpecConfig
     */
    protected $object;
    
    protected $configKey = 'test_flower_file';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $serviceManager = Bootstrap::getServiceManager();
        $config = $serviceManager->get('Config');
        
        //common settings object
        $this->object = new SpecConfig($config[$this->configKey]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    /**
     * @covers Flower\File\Service\SpecConfig::createWellKnownInstance
     */
    public function testCreateWellKnownInstance()
    {
        $instance = $this->object->createWellKnownInstance('ArrayObject', array('foo' => 'bar'));
        $this->assertInstanceof('ArrayObject', $instance);
        $this->assertEquals('bar', $instance['foo']);
    }
    
    /**
     * 
     * @expectedException RuntimeException
     */
    public function testCreateWellKnownInstanceThrowsException()
    {
        $instance = $this->object->createWellKnownInstance('NoExists093409', array('foo' => 'bar'));
        $this->assertInstanceof('ArrayObject', $instance);
        $this->assertEquals('bar', $instance['foo']);
    }
    
    /**
     * @covers Flower\File\Service\SpecConfig::createSpec
     */
    public function testCreateSpec()
    {
        $specConfig = new SpecConfig(array());
        $spec = $specConfig->createSpec();
        $this->assertInstanceof('Flower\File\Spec\SpecInterface', $spec);
        $spec = $this->object->createSpec();
        $this->assertInstanceof('Flower\File\Spec\SpecInterface', $spec);
    }

    /**
     * @covers Flower\File\Service\SpecConfig::createGateway
     */
    public function testCreateGateway()
    {
        $specConfig = new SpecConfig(array());
        $instance = $specConfig->createGateway();
        $this->assertInstanceof('Flower\File\Gateway\GatewayInterface', $instance);
        
        $instance = $this->object->createGateway();
        $this->assertInstanceof('Flower\File\Gateway\GatewayInterface', $instance);
    }

    /**
     * @covers Flower\File\Service\SpecConfig::createResolveSpec
     */
    public function testCreateResolveSpec()
    {
        $specConfig = new SpecConfig(array());
        $instance = $specConfig->createResolveSpec();
        $this->assertInstanceof('Flower\File\Spec\Resolver\ResolveSpecInterface', $instance);
        
        $instance = $this->object->createResolveSpec();
        $this->assertInstanceof('Flower\File\Spec\Resolver\ResolveSpecInterface', $instance);
    }

    /**
     * @covers Flower\File\Service\SpecConfig::createCacheSpec
     */
    public function testCreateCacheSpec()
    {
        $specConfig = new SpecConfig(array());
        $instance = $specConfig->createCacheSpec();
        $this->assertInstanceof('Flower\File\Spec\Cache\CacheSpecInterface', $instance);
        
        $instance = $this->object->createCacheSpec();
        $this->assertInstanceof('Flower\File\Spec\Cache\CacheSpecInterface', $instance);
    }
    
    /**
     * @covers Flower\File\Service\SpecConfig::createMergeSpec
     */
    public function testCreateMergeSpec()
    {
        $specConfig = new SpecConfig(array());
        $instance = $specConfig->createMergeSpec();
        $this->assertInstanceof('Flower\File\Spec\Merge\MergeSpecInterface', $instance);
        
        $instance = $this->object->createMergeSpec();
        $this->assertInstanceof('Flower\File\Spec\Merge\MergeSpecInterface', $instance);
    }
    /**
     * @covers Flower\File\Service\SpecConfig::createFileAdapter
     */
    public function testCreateFileAdapter()
    {
        $specConfig = new SpecConfig(array());
        $instance = $specConfig->createFileAdapter();
        $this->assertInstanceof('Flower\File\Adapter\AdapterInterface', $instance);
        
        $instance = $this->object->createFileAdapter();
        $this->assertInstanceof('Flower\File\Adapter\AdapterInterface', $instance);
    }
    
    /**
     * @covers Flower\File\Service\SpecConfig::configure
     * @todo   Implement testConfigure().
     */
    public function testConfigure()
    {
        $spec = $this->object->createSpec();
        $res = $this->object->configure($spec);
        $this->assertInstanceof('Flower\File\Spec\SpecInterface', $spec);
        $this->assertSame($spec, $res);
        
        $this->assertInstanceof('Flower\File\Gateway\GatewayInterface', $spec->getGateway());
        
        $this->assertInstanceof('Flower\File\Spec\Merge\MergeSpecInterface', $spec->getMergeSpec());
        $this->assertInstanceof('Flower\File\Spec\Resolver\ResolveSpecInterface', $spec->getResolveSpec());
        $this->assertInstanceof('Flower\File\Spec\Cache\CacheSpecInterface', $spec->getCacheSpec());
        $this->assertInstanceof('Flower\File\Adapter\AdapterInterface', $spec->getFileAdapter());
    }


}
