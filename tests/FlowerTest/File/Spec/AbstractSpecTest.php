<?php

namespace FlowerTest\File\Spec;
/*
 *
 *
 * @copyright Copyright (c) 2013-2014 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */
use Flower\File\Spec\AbstractSpec;
use Flower\File\Event;
use Flower\File\Gateway\Gateway;
use Flower\File\Spec\Resolver\Tree;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-18 at 10:08:43.
 */
class AbstractSpecTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var AbstractSpec
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->stub = $this->getMockForAbstractClass('Flower\File\Spec\AbstractSpec');
        $gateway = new Gateway;
        $resolveSpec = new Tree;
        
        $this->stub->setGateway($gateway);
        $this->stub->setResolveSpec($resolveSpec);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testDefaultGatwayInstanceofEventCapable()
    {
        $gateway = $this->stub->getGateway();
        $this->assertInstanceof('Zend\EventManager\EventsCapableInterface', $gateway);
    }
    /**
     * @covers Flower\File\Spec\AbstractSpec::configure
     */
    public function testConfigure()
    {
        $this->stub->configure();
        $gateway = $this->stub->getGateway();
        $this->assertInstanceof('Flower\File\Gateway\Gateway', $gateway);
    }
    
    public function testIssetTreeResolveSpec()
    {
        $this->stub->configure();
        $gateway = $this->stub->getGateway();
        $events = $gateway->getEventManager();
        $listeners = $events->getListeners(Event::EVENT_RESOLVE);
        $this->assertGreaterThan(0, $listeners->count());
        $found = false;
        foreach ($listeners as $listener) {
            if ($listener instanceof \Zend\Stdlib\CallbackHandler) {
                $callback = $listener->getCallback();
                if (is_array($callback)) {
                    $method = end($callback);
                    $object = reset($callback);
                    if ($object instanceof Tree) {
                        //getCallbackはWeakRefも展開する
                        $found = true;
                        break;
                    }
                    else {
                        $this->assertTrue($object);
                    }
                }
            }
            else {
                $this->assertTrue($listener);
            }
        }
        $this->assertTrue($found);
        return $object;
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::attach
     * @todo   Implement testAttach().
     */
    public function testAttach()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::detach
     * @todo   Implement testDetach().
     */
    public function testDetach()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::onRead
     * @todo   Implement testOnRead().
     */
    public function testOnRead()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::onWrite
     * @todo   Implement testOnWrite().
     */
    public function testOnWrite()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::onMerge
     * @todo   Implement testOnMerge().
     */
    public function testOnMerge()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::setGateway
     * @todo   Implement testSetGateway().
     */
    public function testSetGateway()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::getGateway
     * @todo   Implement testGetGateway().
     */
    public function testGetGateway()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::setCacheSpec
     * @todo   Implement testSetCacheSpec().
     */
    public function testSetCacheSpec()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::getCacheSpec
     * @todo   Implement testGetCacheSpec().
     */
    public function testGetCacheSpec()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::setResolveSpec
     * @todo   Implement testSetResolveSpec().
     */
    public function testSetResolveSpec()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::getResolveSpec
     * @todo   Implement testGetResolveSpec().
     */
    public function testGetResolveSpec()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::setMergeSpec
     * @todo   Implement testSetMergeSpec().
     */
    public function testSetMergeSpec()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::getMergeSpec
     * @todo   Implement testGetMergeSpec().
     */
    public function testGetMergeSpec()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::setFileAdapter
     * @todo   Implement testSetFileAdapter().
     */
    public function testSetFileAdapter()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Flower\File\Spec\AbstractSpec::getFileAdapter
     * @todo   Implement testGetFileAdapter().
     */
    public function testGetFileAdapter()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
