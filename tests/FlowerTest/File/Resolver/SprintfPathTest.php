<?php
namespace FlowerTest\File\Resolver;

use Flower\File\Resolver\SprintfPath;
use Flower\Test\TestTool;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-12 at 23:26:26.
 */
class SprintfPathTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SprintfPath
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new SprintfPath;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\File\Resolver\SprintfPath::setOptions
     */
    public function testSetOptions()
    {
        $options = array(
            'lfi_protection' => false,
            'path_spec' => $pathSpec = __DIR__ . '/TestAsset/tmp/%s/file',
            'param' => 'param',
        );
        $this->object->setOptions($options);
        $this->assertEquals(false, TestTool::getPropertyValue($this->object, 'lfiProtectionOn'));
        $this->assertEquals($pathSpec, TestTool::getPropertyValue($this->object, 'pathSpec'));
        $this->assertEquals('param', TestTool::getPropertyValue($this->object, 'param'));
    }

    /**
     * @covers Flower\File\Resolver\SprintfPath::setDefaultSuffix
     */
    public function testSetDefaultSuffix()
    {
        $suffix = '.foo';
        $this->object->setDefaultSuffix($suffix);
        $this->assertEquals('foo', TestTool::getPropertyValue($this->object, 'defaultSuffix'));
    }

    /**
     * @depends testSetDefaultSuffix
     * @covers Flower\File\Resolver\SprintfPath::getDefaultSuffix
     */
    public function testGetDefaultSuffix()
    {
        $suffix = '.foo';
        $this->object->setDefaultSuffix($suffix);
        $this->assertEquals('foo', $this->object->getDefaultSuffix());
    }

    /**
     * @covers Flower\File\Resolver\SprintfPath::setPathSpec
     */
    public function testSetPathSpec()
    {
        $this->object->setPathSpec('foo');
        $this->assertEquals('foo', TestTool::getPropertyValue($this->object, 'pathSpec'));
    }

    /**
     * @covers Flower\File\Resolver\SprintfPath::setParam
     */
    public function testSetParam()
    {
        $this->object->setParam('foo');
        $this->assertEquals('foo', TestTool::getPropertyValue($this->object, 'param'));
    }

    /**
     * @expectedException Flower\Exception\RuntimeException
     */
    public function testGetPathWithoutConfigure()
    {
        $this->object->getPath();
    }

    /**
     * @covers Flower\File\Resolver\SprintfPath::getPath
     */
    public function testGetPath()
    {
        $options = array(
            'lfi_protection' => false,
            'path_spec' => $pathSpec = __DIR__ . '/TestAsset/tmp/%s/file',
            'param' => 'param',
        );
        $this->object->setOptions($options);
        $res = $this->object->getPath();
        $this->assertEquals(__DIR__ . '/TestAsset/tmp/param/file' . DIRECTORY_SEPARATOR, $res);
    }

    /**
     * @covers Flower\File\Resolver\SprintfPath::normalizePath
     */
    public function testNormalizePath()
    {
        $path = 'foo/';
        $this->assertEquals('foo' . DIRECTORY_SEPARATOR, $this->object->normalizePath($path));
    }

    /**
     * @covers Flower\File\Resolver\SprintfPath::setLfiProtection
     */
    public function testSetLfiProtection()
    {
        $bool = false;
        $this->object->setLfiProtection($bool);
        $this->assertEquals($bool, TestTool::getPropertyValue($this->object, 'lfiProtectionOn'));
    }

    /**
     * @covers Flower\File\Resolver\SprintfPath::isLfiProtectionOn
     */
    public function testIsLfiProtectionOn()
    {
        $bool = false;
        $this->object->setLfiProtection($bool);
        $this->assertEquals($bool, $this->object->isLfiProtectionOn());
    }

    /**
     * @covers Flower\File\Resolver\SprintfPath::resolve
     */
    public function testResolve()
    {
        $options = array(
            'lfi_protection' => false,
            'path_spec' => $pathSpec = __DIR__ . '/TestAsset/tmp/%s/file',
            'param' => 'foo',
        );
        $this->object->setOptions($options);
        $files = $this->object->resolve('bar');
        $this->assertCount(1, $files);
        $this->assertInstanceOf('Flower\File\FileInfo', $files[0]);
    }

    /**
     * @covers Flower\File\Resolver\SprintfPath::getLastLookupFailure
     */
    public function testGetLastLookupFailure()
    {
        $ref = TestTool::getPropertyRef($this->object, 'lastLookupFailure');
        $ref->setValue($this->object, 'foo');
        $this->assertEquals('foo', $this->object->getLastLookupFailure());
    }

    /**
     * @covers Flower\File\Resolver\SprintfPath::mayTerminate
     */
    public function testMayTerminate()
    {
        $this->assertTrue($this->object->mayTerminate());
    }
}
