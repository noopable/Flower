<?php

namespace FlowerTest\File\Gateway;
/*
 *
 *
 * @copyright Copyright (c) 2013-2013 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */
use Flower\File\Event;
use Flower\File\Gateway\Gateway;


/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-05 at 22:30:00.
 */
class GatewayUnitTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Gateway
     */
    protected $object;
    
    /**
     *
     * @var PHPUnit_Framework_MockObject
     */
    protected $eventMock;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Gateway;
        $this->eventsMock = $this->getMock('Zend\EventManager\EventManager', array('trigger'));
        $this->object->setEventManager($this->eventsMock);
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    /**
     * @covers Flower\File\Gateway\Gateway::getEvent
     */
    public function testGetEvent()
    {
        $event1 = $this->object->getEvent('foo');
        $this->assertInstanceof('Flower\File\Event', $event1);
        $this->assertEquals('foo', $event1->getDataName());
        $event1->setData(array('bar'));
        $event2 = $this->object->getEvent('foo');
        $this->assertSame($event1, $event2);
    }
    
    /**
     * @covers Flower\File\Gateway\Gateway::getLastEvent
     */
    public function testGetLastEvent()
    {
        $this->object->getEvent('foo');
        $this->object->getEvent('bar');
        $this->assertInstanceof('Flower\File\Event', $this->object->getLastEvent());
        $this->assertEquals('bar', $this->object->getLastEvent()->getDataName());
        $this->object->getEvent('foo');
        $this->assertEquals('foo', $this->object->getLastEvent()->getDataName());
    }

    /**
     * gateway::readで適切にイベントが発火されるかを確認
     * @covers Flower\File\Gateway\Gateway::read
     */
    public function testRead()
    {
        $expected = ['foo' => 'bar'];
        $responseCollection = new \Zend\EventManager\ResponseCollection;
        $responseCollection->push($expected);
        $this->eventsMock->expects($this->once())
                ->method('trigger')
                ->with(Event::EVENT_READ)
                ->will($this->returnValue($responseCollection));
        
        $response = $this->object->read('sample');
        $this->assertEquals($expected, $response);
        
        // trigger内でイベント名を更新してくれるかどうかは、EventManagerの責務
        //$this->assertEquals(Event::EVENT_READ, $event->getName());
    }
        
    /**
     * @covers Flower\File\Gateway\Gateway::resolveAll
     * @todo   Implement testResolveAll().
     */
    public function testResolveAll()
    {
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * 
     * @covers Flower\File\Gateway\Gateway::resolve
     */
    public function testResolveWidthEvent()
    {
        $expected = '/home/www/dev/mock';
        $event = $this->object->getEvent('sample');
        
        $responseCollection = new \Zend\EventManager\ResponseCollection;
        $responseCollection->push($expected);
        
        $this->eventsMock->expects($this->once())
                ->method('trigger')
                ->with(Event::EVENT_RESOLVE, $event, $this->isInstanceof('Closure'))
                ->will($this->returnValue($responseCollection));
        
        $response = $this->object->resolve($event);
        
        $this->assertEquals($expected, $response);

    }
    
    /**
     * 
     * @covers Flower\File\Gateway\Gateway::resolve
     */
    public function testResolveWidthName()
    {
        $expected = '/home/www/dev/mock';
        $name = 'sample';
        $event = $this->object->getEvent($name);
        
        $responseCollection = new \Zend\EventManager\ResponseCollection;
        $responseCollection->push($expected);
        
        $this->eventsMock->expects($this->once())
                ->method('trigger')
                ->with(Event::EVENT_RESOLVE, $event, $this->isInstanceof('Closure'))
                ->will($this->returnValue($responseCollection));
        
        $response = $this->object->resolve($name);
        
        $this->assertEquals($expected, $response);
        $this->assertEquals(Event::RESOLVE_READ, $event->getResolveMode()
                , 'resolveMode default value settings ');
        
    }
    
    /**
     * @covers Flower\File\Gateway\Gateway::write
     */
    public function testWrite()
    {
        $name = 'sample';
        $data = ['foo' => 'bar'];
        $responseCollection = new \Zend\EventManager\ResponseCollection;
        $responseCollection->push(1);
        $this->eventsMock->expects($this->once())
                ->method('trigger')
                ->with(Event::EVENT_WRITE)
                ->will($this->returnValue($responseCollection));
        
        $response = $this->object->write($name, $data);
        $this->assertEquals(1, $response);
        
        $event = $this->object->getEvent($name);
        
        $this->assertEquals($data, $event->getData());
        
    }
    
    /**
     * Don't write this method in tearDown because this test has unlink method
     * if settings are wrong, this method causes a terrible result.
     * @depends testIssetDirectoryCacheSpec
     */
    public function testRefresh()
    {
        $name = 'sample';
        $responseCollection = new \Zend\EventManager\ResponseCollection;
        $responseCollection->push(1);
        $this->eventsMock->expects($this->once())
                ->method('trigger')
                ->with(Event::EVENT_REFRESH)
                ->will($this->returnValue($responseCollection));
        
        $response = $this->object->refresh($name);
        $this->assertEquals(1, $response);
    }
}
