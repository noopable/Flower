<?php
namespace FlowerTest\Model;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-28 at 22:02:07.
 */
class AbstractEntityTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractEntity
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new TestAsset\ConcreteEntity;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\Model\AbstractEntity::__construct
     */
    public function testConstruct()
    {
        $data = array(
            'foo' => 'Foo',
            'bar' => 'Bar',
        );
        $object = new TestAsset\ConcreteEntity($data);
        $this->assertEquals('Foo', $object->foo);
        $this->assertEquals('Bar', $object->bar);
    }

    /**
     * return identifier array
     */
    public function testGetIdentifier()
    {
        $this->assertEquals(array('entity_id'), $this->object->getIdentifier());
    }
    /**
     * @covers Flower\Model\AbstractEntity::column
     */
    public function testColumn()
    {
        $ref = new \ReflectionObject($this->object);
        $prop = $ref->getProperty('columns');
        $prop->setAccessible(true);
        $prop->setValue($this->object, array('foo' => 'bar'));
        $this->assertEquals('bar', $this->object->column('foo'));
        $this->assertEquals('baz', $this->object->column('baz'));
    }

    public function test__get()
    {
        //main purpose
        $this->assertNull($this->object->baz, 'return null. don\'t raise notice');

        //additional tests
        $this->object->foo = 'bar';
        $this->assertEquals('bar', $this->object->foo);
        $this->assertTrue(isset($this->object->foo));
        $this->assertTrue($this->object->offsetExists('foo'), 'This is array value');

        $this->assertTrue(isset($this->object->prop1), 'public property');
        $this->assertFalse($this->object->offsetExists('prop1'), 'this is property not array value');
        $this->assertEquals('prop1Value', $this->object->prop1);

        $this->assertNull($this->object->prop2);
        $this->assertFalse(isset($this->object->prop2), 'protected property');
    }
}
