<?php
namespace FlowerTest\Model\Service;

use Flower\Model\Service\RepositoryServiceFactory;
use Flower\Test\TestTool;
use Zend\Di\Di;
use Zend\ServiceManager\ServiceManager;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-25 at 17:53:20.
 */
class RepositoryServiceFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var RepositoryServiceFactory
     */
    protected $object;

    protected $serviceLocator;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->serviceLocator = new ServiceManager;
        $this->object = new RepositoryServiceFactory;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testCreateServiceSimple()
    {
        $res = $this->object->createService($this->serviceLocator);
        $this->assertInstanceOf('Flower\Model\Service\RepositoryPluginManager', $res);
    }

    /**
     * @covers Flower\Model\Service\RepositoryServiceFactory::createService
     */
    public function testCreateService()
    {
        $config = array(
            'flower_repositories' => array(
            ),
        );
        $this->serviceLocator->setService('Config', $config);
        $res = $this->object->createService($this->serviceLocator);
        $this->assertInstanceOf('Flower\Model\Service\RepositoryPluginManager', $res);

        $peeringServiceManagers = TestTool::getPropertyValue($res, 'peeringServiceManagers');
        $this->assertContains($this->serviceLocator, $peeringServiceManagers);
    }

    public function testDiServiceInitializerIsInjected()
    {
        $config = array(
            'flower_repositories' => array(
            ),
        );
        $di = new Di;
        $this->serviceLocator->setService('Config', $config);
        $this->serviceLocator->setService('Di', $di);
        $res = $this->object->createService($this->serviceLocator);
        $this->assertInstanceOf('Flower\Model\Service\RepositoryPluginManager', $res);

        $initializers = TestTool::getPropertyValue($res, 'initializers');
        $initializer = $initializers[0];
        $this->assertInstanceOf('Zend\ServiceManager\Di\DiServiceInitializer', $initializer);
    }
}
