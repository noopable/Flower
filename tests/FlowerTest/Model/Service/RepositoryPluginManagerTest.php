<?php
namespace FlowerTest\Model\Service;

use Flower\Model\Service\RepositoryPluginManager;
use Flower\Test\TestTool;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-17 at 11:43:04.
 */
class RepositoryPluginManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var RepositoryPluginManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new RepositoryPluginManager;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\Model\Service\RepositoryPluginManager::setPluginNameSpace
     */
    public function testSetPluginNameSpace()
    {
        $pluginNameSpace = 'Foo\Bar';
        $this->object->setPluginNameSpace($pluginNameSpace);
        $this->assertEquals($pluginNameSpace, TestTool::getPropertyValue($this->object, 'pluginNameSpace'));
    }

    /**
     * @depends testSetPluginNameSpace
     * @covers Flower\Model\Service\RepositoryPluginManager::getPluginNameSpace
     */
    public function testGetPluginNameSpace()
    {
        $pluginNameSpace = 'Foo\Bar';
        $this->object->setPluginNameSpace($pluginNameSpace);
        $this->assertEquals($pluginNameSpace, $this->object->getPluginNameSpace());
    }

    /**
     * @covers Flower\Model\Service\RepositoryPluginManager::byName
     */
    public function testByName()
    {
        $name = 'Foo';
        $options = array('foo' => 'bar');
        $usePeeringServiceManagers = true;
        $byNameHook = new TestAsset\HookByNameRepositoryPluginManager;
        $res = $byNameHook->byName($name, $options, $usePeeringServiceManagers);
        $this->assertEquals($name, $res[0]);
        $this->assertEquals($options, $res[1]);
        $this->assertEquals($usePeeringServiceManagers, $res[2]);
        
        $pluginNameSpace = 'FlowerTest\Model\Service';
        $byNameHook->setPluginNameSpace($pluginNameSpace);
        $res = $byNameHook->byName($name, $options, $usePeeringServiceManagers);
        $this->assertEquals($pluginNameSpace . '\\' . $name, $res[0]);
        $this->assertEquals($options, $res[1]);
        $this->assertEquals($usePeeringServiceManagers, $res[2]);
    }

    /**
     * @covers Flower\Model\Service\RepositoryPluginManager::validatePlugin
     */
    public function testValidatePlugin()
    {
        $plugin = $this->getMock('Flower\Model\RepositoryInterface');
        $this->object->validatePlugin($plugin);
    }
    
    /**
     * @expectedException Flower\Model\Exception\RuntimeException
     */
    public function testValidatePluginWithInvalidObject()
    {
        $object = new \stdClass;
        $this->object->validatePlugin($object);
    }

    /**
     * @covers Flower\Model\Service\RepositoryPluginManager::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
