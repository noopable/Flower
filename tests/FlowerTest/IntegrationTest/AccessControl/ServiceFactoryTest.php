<?php
namespace FlowerTest\IntegrationTest\AccessControl;

use Flower\AccessControl\AccessControlServiceFactory;
use Flower\AccessControl\RoleMapper\RoleMapperInterface;
use FlowerTest\IntegrationTest\TestAsset\ServiceLocator;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-14 at 21:54:20.
 */
class AccessControlServiceFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AccessControlServiceFactory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testStandardServiceLocator()
    {
        $config = include __DIR__ . '/TestAsset/standard.config.php';
        $serviceLocator = ServiceLocator::getServiceLocator($config);
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $serviceLocator);
        return $serviceLocator;
    }
    
    /**
     * @depends testStandardServiceLocator
     */
    public function testStandardConfigIsInjected($serviceLocator)
    {
        $this->assertTrue(isset($serviceLocator->get('Config')['service_manager']['factories']['FlowerTest_AccessControl']));
    }
    
    /**
     * @depends testStandardServiceLocator
     */
    public function testStandardAccessControlService($serviceLocator)
    {
        $accessControlService = $serviceLocator->get('FlowerTest_AccessControl');
        $this->assertInstanceOf('Flower\AccessControl\AccessControlService', $accessControlService);
        return $accessControlService;
    }
    
    /**
     * @depends testStandardAccessControlService
     */
    public function testRoleMapperIsSet($accessControlService)
    {
        $roleMapper = $accessControlService->getRoleMapper();
        $this->assertInstanceOf('Flower\AccessControl\RoleMapper\RoleMapperInterface', $roleMapper);
        $resourceStorage = $roleMapper->getResourceStorage();
        $this->assertInstanceOf('Flower\AccessControl\AuthClient\IdenticalStorageInterface', $resourceStorage);
        
    }
    
    /**
     * @depends testStandardServiceLocator
     */
    public function testConnect($serviceLocator)
    {
        if (!extension_loaded('pdo_mysql')) {
            $this->markTestSkipped(
              'Pdo_MySQL 拡張モジュールが使用できません。'
            );
        }
        $config = $serviceLocator->get('Config');
        $driverInfo = $config['test_auth_db']['driver'];
        $adapter = new \Zend\Db\Adapter\Adapter($driverInfo);
        $connection = $adapter->getDriver()->getConnection();
        $parameters = $connection->getConnectionParameters();
        $connection->connect();
    }
    /**
     * 
     * @depends testStandardAccessControlService
     */
    public function testAuthenticate($accessControlService)
    {
        if (!extension_loaded('pdo_mysql')) {
            $this->markTestSkipped(
              'Pdo_MySQL 拡張モジュールが使用できません。'
            );
        }
        
        $this->assertTrue($accessControlService->authenticate('foo@example.com', 'admin'));
        $role = $accessControlService->getRole();
        $this->assertEquals(RoleMapperInterface::BUILT_IN_CURRENT_CLIENT_AGGREGATE, $role);
        $this->assertContains('admin', $role->getParents());
    }
    
    /**
     * @depends testStandardAccessControlService
     * @param type $accessControlService
     */
    public function testStandardAuthService($accessControlService)
    {
        $authService = $accessControlService->getAuthService();
        $this->assertInstanceOf('Zend\Authentication\AuthenticationService', $authService);
    }
 
}
