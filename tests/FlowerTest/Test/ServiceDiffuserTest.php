<?php
namespace FlowerTest\Test;

use Flower\Test\ServiceDiffuser;
use Flower\Test\TestTool;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-03-17 at 08:07:54.
 */
class ServiceDiffuserTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ServiceDiffuser
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testConstructWithPath()
    {
        $configPath = realpath(__DIR__ . '/TestAsset/standard.config.php');
        $serviceDiffuser = new ServiceDiffuser($configPath);
        $this->assertInstanceOf('Flower\\Test\\ServiceDiffuser', $serviceDiffuser);
        $baseConfig = TestTool::getPropertyValue($serviceDiffuser, 'baseConfig');
        $this->assertArrayHasKey('service_manager', $baseConfig);
        $this->assertArrayHasKey('test_config_file', $baseConfig);
        $this->assertEquals($configPath, $baseConfig['test_config_file']);
    }

    public function testConstructWithArray()
    {
        $appConfig = array('foo' => 'bar');
        $serviceDiffuser = new ServiceDiffuser($appConfig);
        $this->assertInstanceOf('Flower\\Test\\ServiceDiffuser', $serviceDiffuser);
        $baseConfig = TestTool::getPropertyValue($serviceDiffuser, 'baseConfig');
        $this->assertEquals('bar', $baseConfig['foo']);
    }

    /**
     * 大本の設定は生かしつつ、追加で設定した情報により新しいServiceManagerを
     * 取得できます。
     *
     * テスト環境に合わせたテストを書きたいとき、変更可能性を排除する目的と、
     * 設定ごとの動作確認を行うために使用します。
     *
     * @covers Flower\Test\ServiceDiffuser::diffuseServiceLocator
     */
    public function testDiffuseServiceLocator()
    {
        $configPath = realpath(__DIR__ . '/TestAsset/standard.config.php');
        $serviceDiffuser = new ServiceDiffuser($configPath);

        $appConfig = array('foo' => 'bar');
        $moduleConfig = array('foo' => 'baz');
        $serviceLocator = $serviceDiffuser->diffuseServiceLocator($appConfig, $moduleConfig);

        $applicationConfig = $serviceLocator->get('ApplicationConfig');

        $this->assertEquals('bar', $applicationConfig['foo']);
        $this->assertEquals($configPath, $applicationConfig['test_config_file']);

        $moduleConfig = $serviceLocator->get('Config');
        $this->assertEquals('baz', $moduleConfig['foo']);

        $overwriteConfig = array('test_config_file' => __FILE__);
        $diffusedServiceLocator = $serviceDiffuser->diffuseServiceLocator($overwriteConfig);
        $this->assertEquals(__FILE__ , $diffusedServiceLocator ->get('ApplicationConfig')['test_config_file']);
    }
}
