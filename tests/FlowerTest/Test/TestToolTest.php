<?php
namespace FlowerTest\Test;

use Flower\Test\TestTool;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-15 at 06:00:11.
 */
class TestToolTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var TestTool
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers TestTool::getPropertyRef
     */
    public function testGetPropertyRef()
    {
        $object = new TestAsset\Foo;
        $ref = TestTool::getPropertyRef($object, 'bar');
        $this->assertInstanceOf('ReflectionProperty', $ref);
        $this->assertEquals('FlowerTest\Test\TestAsset\Foo', $ref->getDeclaringClass()->name);
        $this->assertEquals('value', $ref->getValue($object));
    }

    /**
     * @covers TestTool::getPropertyValue
     */
    public function testGetPropertyValue()
    {
        $object = new TestAsset\Foo;
        $this->assertEquals('value', TestTool::getPropertyValue($object, 'bar'));
    }
    
   /**
     * @covers TestTool::getPropertyValue
     */
    public function testGetStaticPropertyValue()
    {
        $object = new TestAsset\Foo;
        $this->assertEquals('staticValue', TestTool::getPropertyValue($object, 'baz', true));
    }

    /**
     * @covers TestTool::getMethodRef
     */
    public function testGetMethodRef()
    {
        $object = new TestAsset\Foo;
        $ref = TestTool::getMethodRef($object, 'doMethod');
        $this->assertInstanceOf('ReflectionMethod', $ref);
        $this->assertEquals('FlowerTest\Test\TestAsset\Foo::doMethod', $ref->invoke($object));
    }

}
