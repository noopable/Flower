<?php
namespace FlowerTest\ServiceLayer\Wrapper;

use Flower\Test\TestTool;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-16 at 09:32:47.
 */
class AbstractWrapperTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractWrapper
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new TestAsset\ConcreteWrapper;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\ServiceLayer\Wrapper\AbstractWrapper::setProxyFactory
     */
    public function testSetProxyFactory()
    {
        $factory = $this->getMock('Flower\ServiceLayer\Wrapper\ProxyFactoryInterface');
        $this->object->setProxyFactory($factory);
        $this->assertSame($factory, TestTool::getPropertyValue($this->object, 'proxyFactory'));
    }

    /**
     * @depends testSetProxyFactory
     * @covers Flower\ServiceLayer\Wrapper\AbstractWrapper::getProxyFactory
     */
    public function testGetProxyFactory()
    {
        $factory = $this->getMock('Flower\ServiceLayer\Wrapper\ProxyFactoryInterface');
        $this->object->setProxyFactory($factory);
        $this->assertSame($factory, $this->object->getProxyFactory());
    }

    /**
     * @covers Flower\ServiceLayer\Wrapper\AbstractWrapper::setWrapTargets
     */
    public function testSetWrapTargets()
    {
        $wrapTarget = array('foo');
        $this->object->setWrapTargets($wrapTarget);
        $this->assertEquals(array('foo' => 'foo'), TestTool::getPropertyValue($this->object, 'wrapTargets'));
    }

    /**
     * @covers Flower\ServiceLayer\Wrapper\AbstractWrapper::addWrapTarget
     */
    public function testAddWrapTarget()
    {
        $this->object->addWrapTarget('foo');
        $this->object->addWrapTarget('bar');
        $this->assertEquals(array('foo' => 'foo', 'bar' => 'bar'), TestTool::getPropertyValue($this->object, 'wrapTargets'));
    }

    /**
     * @depends testSetWrapTargets
     * @covers Flower\ServiceLayer\Wrapper\AbstractWrapper::removeWrapTarget
     */
    public function testRemoveWrapTarget()
    {
        $this->object->setWrapTargets(array('foo', 'bar'));
        $this->object->removeWrapTarget('foo');
        $this->assertEquals(array('bar' => 'bar'), TestTool::getPropertyValue($this->object, 'wrapTargets'));
    }

    /**
     * @depends testSetWrapTargets
     * @covers Flower\ServiceLayer\Wrapper\AbstractWrapper::getWrapTargets
     */
    public function testGetWrapTargets()
    {
        $this->object->setWrapTargets(array('foo', 'bar'));
        $this->assertEquals(array('foo' => 'foo', 'bar' => 'bar'), $this->object->getWrapTargets());
    }

    /**
     * @covers Flower\ServiceLayer\Wrapper\AbstractWrapper::isWrapTarget
     * @depends testSetWrapTargets
     */
    public function testIsWrapTarget()
    {
        $this->object->setWrapTargets(array('foo', 'bar'));
        $this->assertTrue($this->object->isWrapTarget('foo'));
        $this->assertTrue($this->object->isWrapTarget('bar'));
        $this->assertFalse($this->object->isWrapTarget('baz'));
    }

    /**
     * @covers Flower\ServiceLayer\Wrapper\AbstractWrapper::wrap
     */
    public function testWrapNoConfig()
    {
        $service = new \FlowerTest\ServiceLayer\TestAsset\ServiceForTest;
        $this->assertSame($service, $this->object->wrap($service));
    }
    
    /**
     * @covers Flower\ServiceLayer\Wrapper\AbstractWrapper::wrap
     */
    public function testWrapWithConfig()
    {
        $service = new \FlowerTest\ServiceLayer\TestAsset\ServiceForTest;
        $wrapped = $this->getMock('Flower\ServiceLayer\ServiceLayerInterface');
        $this->object->setWrapTargets(array('foo', 'bar'));
        $factory = $this->getMock('Flower\ServiceLayer\Wrapper\ProxyFactoryInterface');
        $factory->expects($this->once())
                ->method('factory')
                ->with($this->equalTo($service))
                ->will($this->returnValue($wrapped));
        $this->object->setProxyFactory($factory);
        $res = $this->object->wrap($service, 'foo');
        $this->assertSame($wrapped, $res);
    }
    
    /**
     * @covers Flower\ServiceLayer\Wrapper\AbstractWrapper::wrap
     */
    public function testWrapWithoutFactory()
    {
        $service = new \FlowerTest\ServiceLayer\TestAsset\ServiceForTest;
        $this->object->setWrapTargets(array('foo', 'bar'));
        $this->assertSame($service, $this->object->wrap($service, 'foo'));
    }
    
    /**
     * @covers Flower\ServiceLayer\Wrapper\AbstractWrapper::wrap
     */
    public function testWrapWithoutTarget()
    {
        $service = new \FlowerTest\ServiceLayer\TestAsset\ServiceForTest;
        $factory = $this->getMock('Flower\ServiceLayer\Wrapper\ProxyFactoryInterface');
        $factory->expects($this->never())
                ->method('factory');
        $this->object->setProxyFactory($factory);
        $res = $this->object->wrap($service, 'foo');
        $this->assertSame($service, $res);
    }
}
