<?php
namespace FlowerTest\ServiceLayer;

use Flower\Test\TestTool;
use Flower\ServiceLayer\ServiceLayerPluginManager;
use Zend\EventManager\EventManager;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-15 at 19:18:03.
 */
class ServiceLayerPluginManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ServiceLayerPluginManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ServiceLayerPluginManager;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\ServiceLayer\ServiceLayerPluginManager::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        $service = $this->getMock('Flower\ServiceLayer\ServiceLayerInterface');
        $this->object->setService('foo', $service);
        $wrapped = new \ArrayObject(array($service));
        $wrapper = $this->getMock('Flower\ServiceLayer\Wrapper\ServiceWrapperInterface', array('wrap'));
        $wrapper->expects($this->once())
                ->method('wrap')
                ->with('foo', $service)
                ->will($this->returnValue($wrapped));
        $this->object->addServiceWrapper($wrapper);
        $res = $this->object->get('foo');
        $this->assertSame($wrapped, $res);
    }

    /**
     * @covers Flower\ServiceLayer\ServiceLayerPluginManager::validatePlugin
     */
    public function testValidatePlugin()
    {
        $mock = $this->getMock('Flower\ServiceLayer\ServiceLayerInterface');
        $this->object->validatePlugin($mock);
        //特にチェックする必要はない。
    }
    /**
     * @covers Flower\ServiceLayer\ServiceLayerPluginManager::validatePlugin
     * @expectedException Flower\ServiceLayer\Exception\RuntimeException
     */
    public function testValidatePluginInvalid()
    {
        $service = new \stdClass;
        $this->object->validatePlugin($service);
    }

    /**
     * @covers Flower\ServiceLayer\ServiceLayerPluginManager::addServiceWrapper
     */
    public function testAddServiceWrapper()
    {
        $wrapper = $this->getMock('Flower\ServiceLayer\Wrapper\ServiceWrapperInterface');
        $this->object->addServiceWrapper($wrapper);
        $this->assertSame($wrapper, TestTool::getPropertyValue($this->object, 'wrappers')[0]);
    }

    /**
     * @covers Flower\ServiceLayer\ServiceLayerPluginManager::setPluginNameSpace
     */
    public function testSetPluginNameSpace()
    {
        $namespace = __NAMESPACE__;
        $this->object->setPluginNameSpace($namespace);
        $this->assertEquals($namespace, TestTool::getPropertyValue($this->object, 'pluginNameSpace'));
    }

    /**
     * @depends testSetPluginNameSpace
     * @covers Flower\ServiceLayer\ServiceLayerPluginManager::getPluginNameSpace
     */
    public function testGetPluginNameSpace()
    {
        $namespace = __NAMESPACE__;
        $this->object->setPluginNameSpace($namespace);
        $this->assertEquals($namespace, $this->object->getPluginNameSpace());
    }

    /**
     * @covers Flower\ServiceLayer\ServiceLayerPluginManager::autoAddInvokableClassByNamespace
     */
    public function testAutoAddInvokableClassByNamespace()
    {
        $origInvokables = TestTool::getPropertyValue($this->object, 'invokableClasses');
        $this->assertEquals(array(), $origInvokables);
        //no namespace pass through
        $this->object->autoAddInvokableClassByNamespace('serviceForTest');
        $this->assertEquals(array(), TestTool::getPropertyValue($this->object, 'invokableClasses'));

        //クラスの実在をチェックされるのでMockは使えません。
        $namespace = __NAMESPACE__ . '\TestAsset';
        $this->object->setPluginNameSpace($namespace);
        $this->object->autoAddInvokableClassByNamespace('serviceForTest');
        $this->assertArrayHasKey(strtolower('serviceForTest'), TestTool::getPropertyValue($this->object, 'invokableClasses'));
    }

    /**
     * @covers Flower\ServiceLayer\ServiceLayerPluginManager::setEventManager
     * @todo   Implement testSetEventManager().
     */
    public function testSetEventManager()
    {
        $eventManager = new EventManager;
        $this->object->setEventManager($eventManager);
        $this->assertSame($eventManager, TestTool::getPropertyValue($this->object, 'events'));
    }
    /**
     * @depends testSetEventManager
     * @covers Flower\ServiceLayer\ServiceLayerPluginManager::getEventManager
     */
    public function testGetEventManager()
    {
        $eventManager = new EventManager;
        $this->object->setEventManager($eventManager);
        $this->assertSame($eventManager, $this->object->getEventManager());
    }

}
