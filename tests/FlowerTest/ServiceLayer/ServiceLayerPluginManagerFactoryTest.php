<?php
namespace FlowerTest\ServiceLayer;

use Flower\AccessControl\AccessControlService;
use Flower\AccessControl\AccessControlWrapper;
use Flower\Domain\CurrentDomain;
use Flower\Domain\Service as DomainService;
use Flower\ServiceLayer\ServiceLayerPluginManagerFactory;
use Flower\Test\TestTool;
use FlowerTest\Domain\TestAsset\ConcreteDomainAware;
use Zend\Di\Di;
use Zend\Permissions\Acl\Acl;
use Zend\ServiceManager\ServiceManager;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-15 at 19:35:25.
 */
class ServiceLayerPluginManagerFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ServiceLayerPluginManagerFactory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ServiceLayerPluginManagerFactory;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\ServiceLayer\ServiceLayerPluginManagerFactory::createService
     */
    public function testCreateService()
    {
        $serviceLocator = new ServiceManager;
        $res = $this->object->createService($serviceLocator);
        $this->assertInstanceOf('Flower\ServiceLayer\ServiceLayerPluginManager', $res);
        $this->assertSame($serviceLocator, $res->getServiceLocator());
    }

    public function testCreateServiceWithAccessControl()
    {
        $accessControlService = new AccessControlService;
        $accessControlWrapper = new AccessControlWrapper;
        $authService = $this->getMock('Zend\Authentication\AuthenticationService');
        $result = $this->getMockBuilder('Zend\Authentication\Result')
                ->disableOriginalConstructor()
                ->getMock();
        $result->expects($this->once())
                ->method('getIdentity')
                ->will($this->returnValue('foo'));
        $result->expects($this->once())
                ->method('isValid')
                ->will($this->returnValue(true));
        $accessControlService->setAuthService($authService);
        $acl = new Acl;
        $accessControlService->setAcl($acl);
        $accessControlWrapper->setAccessControlService($accessControlService);
        $accessControlService->setAccessControlWrapper($accessControlWrapper);
        $serviceLocator = new ServiceManager;
        $serviceLocator->setService('Flower_AccessControl', $accessControlService);
        $res = $this->object->createService($serviceLocator);
        $this->assertInstanceOf('Flower\ServiceLayer\ServiceLayerPluginManager', $res);
        $this->assertSame($serviceLocator, $res->getServiceLocator());
        $wrappers = \Flower\Test\TestTool::getPropertyValue($res, 'wrappers');
        $this->assertSame($accessControlService, $wrappers[0]);

        $service = $this->getMock('Flower\ServiceLayer\AbstractService');
        $res->setService('foo', $service);
        $noWrapped = $res->get('foo');
        $this->assertNotInstanceOf('Flower\AccessControl\ServiceProxy', $noWrapped);
        $this->assertInstanceOf('Flower\ServiceLayer\AbstractService', $noWrapped);

        $accessControlService->addUnderAccessControl('foo');
        $wrapped = $res->get('foo');
        $this->assertInstanceOf('Flower\AccessControl\ServiceProxy', $wrapped);
    }

    public function testDiServiceInitializerIsActive()
    {

        $serviceLocator = new ServiceManager;
        $di = new Di;
        $domainService = new DomainService;
        $currentDomain = new CurrentDomain($domainService);
        $instanceManager = $di->instanceManager();
        $instanceManager->addSharedInstance($currentDomain, 'Flower\Domain\CurrentDomain');
        $instanceManager->addTypePreference('Flower\Domain\DomainInterface', $currentDomain);
        $serviceLocator->setService('Di', $di);

        $res = $this->object->createService($serviceLocator);
        $this->assertInstanceOf('Flower\ServiceLayer\ServiceLayerPluginManager', $res);
        $this->assertSame($serviceLocator, $res->getServiceLocator());

        $initializers = TestTool::getPropertyValue($res, 'initializers');

        //1 is default closure for serviceLocatorAware
        $initializer = $initializers[0];

        $this->assertInstanceOf('Zend\ServiceManager\Di\DiServiceInitializer', $initializer);
        $concreteDomainAware = new ConcreteDomainAware;
        $initializer->initialize($concreteDomainAware, $serviceLocator);
        $this->assertSame($currentDomain, $concreteDomainAware->getDomain());
    }
}
