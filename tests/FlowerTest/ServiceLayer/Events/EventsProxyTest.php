<?php
namespace FlowerTest\ServiceLayer\Events;

use Flower\ServiceLayer\Events\EventsProxy;
use Flower\Test\TestTool;
use FlowerTest\ServiceLayer\TestAsset\ServiceForTest;
use Zend\EventManager\EventManager;
use Zend\EventManager\Event;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-16 at 13:41:24.
 */
class EventsProxyTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var EventsProxy
     */
    protected $object;

    protected $service;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->service = $this->getMock('FlowerTest\ServiceLayer\ServiceLayerInterface', array('foo'));
        $this->object = new EventsProxy($this->service);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\ServiceLayer\Events\EventsProxy::passThrough
     */
    public function testPassThrough()
    {
        $this->assertSame($this->service, $this->object->passThrough());
    }

    /**
     * @covers Flower\ServiceLayer\Events\EventsProxy::proxy
     */
    public function testProxy()
    {
        $event = new Event;
        $event->setTarget($this->service);
        $event->setName(EventsProxy::EVENT_INVOKE);
        $event->setParams(array('method' => 'foo', 'args' => array('bar', 'baz')));
        
        $this->service->expects($this->once())
                ->method('foo')
                ->with($this->equalTo('bar'), $this->equalTo('baz'))
                ->will($this->returnValue('qux'));
        $this->assertEquals('qux', $this->object->proxy($event));
    }

    /**
     * @covers Flower\ServiceLayer\Events\EventsProxy::setEventManager
     */
    public function testSetEventManager()
    {
        $eventManager = new EventManager;
        $this->object->setEventManager($eventManager);
        $this->assertSame($eventManager, TestTool::getPropertyValue($this->object, 'events'));
        $identifiers = $eventManager->getIdentifiers();
        $this->assertContains('Flower\ServiceLayer\ServiceLayerInterface', $identifiers);
    }

    /**
     * @depends testSetEventManager
     * @covers Flower\ServiceLayer\Events\EventsProxy::getEventManager
     */
    public function testGetEventManager()
    {
        $eventManager = new EventManager;
        $this->object->setEventManager($eventManager);
        $this->assertSame($eventManager, $this->object->getEventManager());
    }

    /**
     * @covers Flower\ServiceLayer\Events\EventsProxy::__call
     */
    public function test__call()
    {
        $response = $this->getMock('Zend\EventManager\ResponseCollection');
        $eventManager = $this->getMock('Zend\EventManager\EventManager', array('trigger'));
        $eventManager->expects($this->once())
                ->method('trigger')
                ->with($this->equalTo(EventsProxy::EVENT_INVOKE))
                ->will($this->returnValue($response));
        $response->expects($this->once())
                ->method('last')
                ->will($this->returnValue('__RESULT__'));
        $this->object->setEventManager($eventManager);
        $res = $this->object->foo('bar');
        $this->assertEquals('__RESULT__', $res);
    }
    
    public function testEventFlow()
    {
        $service = new ServiceForTest;
        $eventManager = new EventManager;
        $eventsProxy = new EventsProxy($service);
        $eventsProxy->setEventManager($eventManager);
        $res = $eventsProxy->foo('bar');
        $this->assertEquals('foo', $res['name']);
        $this->assertEquals(array('bar'), $res['arguments']);
    }
}
