<?php

/**
 *
 *
 * @copyright Copyright (c) 2013-2014 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */

namespace FlowerTest;

use FlowerTest\TestAsset\RecursivePriorityQueueA;
use FlowerTest\TestAsset\RecursivePriorityQueueB;
use FlowerTest\TestAsset\RecursivePriorityQueueC;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-05 at 13:18:14.
 */
class RecursivePriorityQueueTraitTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var RecursivePriorityQueueA
     */
    protected $objectA;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->objectA = new RecursivePriorityQueueA;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function instanceofRecursiveIterator()
    {

    }

    /**
     * @covers Flower\RecursivePriorityQueueTrait::insert
     */
    public function testInsert() {
        $data = 'foo';
        $this->objectA->insert($data);
        //$this->objectA->rewind();
        $this->assertEquals($data, $this->objectA->current());
    }

    /**
     * @covers Flower\RecursivePriorityQueueTrait::remove
     */
    public function testRemove() {
        $data = 'foo';
        $this->objectA->insert($data);
        $this->objectA->remove($data);
        $this->assertNull($this->objectA->current());
    }

    /**
     * @covers Flower\RecursivePriorityQueueTrait::current
     */
    public function testCurrent() {

        $this->assertNull($this->objectA->current());
        $data = 'foo';
        $this->objectA->insert($data);
        //$this->objectA->rewind();
        $this->assertEquals($data, $this->objectA->current());
    }

    /**
     * @covers Flower\RecursivePriorityQueueTrait::getChildren
     */
    public function testGetChildren() {
        $child = new RecursivePriorityQueueB;
        $data  = 'foo';
        $child->insert($data);
        $this->objectA->insert($child);
        $this->assertEquals($data, $this->objectA->getChildren()->current());
    }

    /**
     * @covers Flower\RecursivePriorityQueueTrait::hasChildren
     */
    public function testHasChildrenStrictContains() {
        $parent = new RecursivePriorityQueueA;
        $child  = new RecursivePriorityQueueB;
        $child2 = new RecursivePriorityQueueC;
        $data  = 'foo';
        $child->insert('bar');
        $parent->insert($child);
        $parent->insert($child2);
        $parent->insert($data);

        $parent->rewind();
        //子のいるキュー
        $this->assertTrue($parent->hasChildren());

        $parent->next();
        //子のいないキュー
        $this->assertFalse($parent->hasChildren());

        $parent->next();
        //スカラーデータ
        $this->assertFalse($parent->hasChildren());
    }

    /**
     * @covers Flower\RecursivePriorityQueueTrait::key
     */
    public function testKey() {
        $this->objectA->insert('foo');
        $this->objectA->insert('bar');
        $this->objectA->insert('baz');
        $this->objectA->rewind();
        $this->assertEquals('foo', $this->objectA->current());
        $this->assertEquals(2, $this->objectA->key());
        $this->objectA->next();
        $this->assertEquals('bar', $this->objectA->current());
        $this->assertEquals(1, $this->objectA->key());
        $this->objectA->next();
        $this->assertEquals('baz', $this->objectA->current());
        $this->assertEquals(0, $this->objectA->key());
    }

    public function testSplPriorityQueue()
    {
        $object = new \SplPriorityQueue();
        $object->insert('foo', 1.5);
        $object->insert('baz', 1.1);
        $object->insert('bar', 1.2);
        $object->rewind();
        $this->assertEquals('foo', $object->current());
        $this->assertEquals(2, $object->key());
        $object->next();
        $this->assertEquals('bar', $object->current());
        $this->assertEquals(1, $object->key());
        $object->next();
        $this->assertEquals('baz', $object->current());
        $this->assertEquals(0, $object->key());
    }

    /**
     * @covers Flower\RecursivePriorityQueueTrrait::next
     */
    public function testNext() {
        $this->objectA->insert('foo');
        $this->objectA->insert('bar');
        $this->assertEquals('foo', $this->objectA->current());
        $this->objectA->next();
        $this->assertEquals('bar', $this->objectA->current());
    }

    /**
     * @covers Flower\RecursivePriorityQueueTrait::rewind
     */
    public function testRewind() {
        $child = new RecursivePriorityQueueB;
        $data  = 'foo';
        $child->insert('bar');
        $child->insert('baz');
        $this->objectA->insert($child);
        $this->objectA->insert($data);
        $this->assertTrue($this->objectA->hasChildren());
        $this->assertSame($child, $this->objectA->current());
        $this->assertSame($child, $this->objectA->getChildren());
        $this->assertEquals('bar', $child->current());
        $child->next();
        $this->assertEquals('baz', $child->current());
        $this->objectA->next();
        $this->assertFalse($this->objectA->hasChildren());
        $this->objectA->rewind();
        $this->assertTrue($this->objectA->hasChildren());
        $this->assertSame($child, $this->objectA->getChildren());
        //rewindは下位オブジェクトまでは影響しない。
        $this->assertEquals('baz', $child->current());
    }

    public function testWithRecursiveIteratorIterator()
    {
        $this->objectA->insert('1');
        $child = new RecursivePriorityQueueB;
        $child->insert('2.1');
        $child->insert('2.2');
        $this->objectA->insert($child);
        $this->objectA->insert('3');
        $rii = new \RecursiveIteratorIterator($this->objectA);

        $rii->rewind();
        $rii->current();
        $this->assertEquals('1', $rii->current(), 'check first');
        $rii->next();
        $this->assertEquals('2.1', $rii->current());
        $rii->next();
        $this->assertEquals('2.2', $rii->current());
        $rii->next();
        $this->assertEquals('3', $rii->current());

        //can rewind repeat
        $rii->rewind();
        $rii->current();
        $this->assertEquals('1', $rii->current(), 'check first');
        $rii->next();
        $this->assertEquals('2.1', $rii->current());
        $rii->next();
        $this->assertEquals('2.2', $rii->current());
        $rii->next();
        $this->assertEquals('3', $rii->current());

        $rii = new \RecursiveIteratorIterator($this->objectA,
                \RecursiveIteratorIterator::SELF_FIRST);
        $rii->rewind();
        $this->assertEquals('1', $rii->current());
        $rii->next();
        $this->assertInstanceOf('FlowerTest\\TestAsset\\RecursivePriorityQueueB', $rii->current());
        $rii->next();
        $this->assertEquals('2.1', $rii->current());
        $rii->next();
        $this->assertEquals('2.2', $rii->current());
        $rii->next();
        $this->assertEquals('3', $rii->current());

    }

    /**
     * @covers Flower\RecursivePriorityQueueTrait::valid
     */
    public function testValid() {
        $this->objectA->insert('foo');
        $this->objectA->insert('bar');
        $this->assertTrue($this->objectA->valid());
        $this->objectA->next();
        $this->assertTrue($this->objectA->valid());
        $this->objectA->next();
        $this->assertFalse($this->objectA->valid());
    }

}
