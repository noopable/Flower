<?php
namespace Flower\AccessControl\RoleMapper;

use Flower\AccessControl\RoleMapper\RoleMapper;
use Flower\AccessControl\RoleMapper\RoleMapperInterface;
use Flower\AccessControl\RoleMapper\RolePrefixFilter;
use Flower\Test\TestTool;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-14 at 14:38:56.
 */
class RoleMapperTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var RoleMapper
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new RoleMapper;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\AccessControl\RoleMapper\RoleMapper::setRoleFilter
     */
    public function testSetRoleFilter()
    {
        $callable = function () {};
        $this->object->setRoleFilter($callable);
        $this->assertSame($callable, TestTool::getPropertyValue($this->object, 'roleFilter'));
    }

    /**
     * @depends testSetRoleFilter
     * @covers Flower\AccessControl\RoleMapper\RoleMapper::getRoleFilter
     */
    public function testGetRoleFilter()
    {
        $callable = function () {};
        $this->object->setRoleFilter($callable);
        $this->assertSame($callable, $this->object->getRoleFilter());
    }

    /**
     * @covers Flower\AccessControl\RoleMapper\RoleMapper::filterRoles
     */
    public function testFilterRoles()
    {
        $roles = array('foo', 'bar');
        $expects = array('foo');
        $filter = $this->getMock('stdClass', array('__invoke'));
        $filter->expects($this->once())
                ->method('__invoke')
                ->will($this->returnValue($expects));
        $this->object->setRoleFilter($filter);
        $res = $this->object->filterRoles($roles);
        $this->assertEquals($expects, $res);
    }

    /**
     * @covers Flower\AccessControl\RoleMapper\RoleMapper::filterRoles
     */
    public function testFilterRolesExample()
    {
        $filter = new RolePrefixFilter;
        $prefix = 'pre';
        $roles = array('pre.foo', 'pre.bar', 'baz', 'other.qux');
        $filter->setPrefix($prefix);
        $this->object->setRoleFilter($filter);
        $this->assertEquals(array('pre.foo', 'pre.bar'), $this->object->filterRoles($roles));
    }

    /**
     * @covers Flower\AccessControl\RoleMapper\RoleMapper::setResourceStorage
     */
    public function testSetResourceStorage()
    {
        $resourceStorage = $this->getMock('Flower\AccessControl\AuthClient\ResourceStorageInterface');
        $ref = new \ReflectionObject($this->object);
        $prop = $ref->getProperty('resourceStorage');
        $prop->setAccessible(true);
        $this->object->setResourceStorage($resourceStorage);
        $this->assertSame($resourceStorage, $prop->getValue($this->object));
    }

    /**
     * @depends testSetResourceStorage
     * @covers Flower\AccessControl\RoleMapper\RoleMapper::getResourceStorage
     *
     */
    public function testGetResourceStorage()
    {
        $resourceStorage = $this->getMock('Flower\AccessControl\AuthClient\ResourceStorageInterface');
        $this->object->setResourceStorage($resourceStorage);
        $this->assertSame($resourceStorage, $this->object->getResourceStorage());
    }

    /**
     * @covers Flower\AccessControl\RoleMapper\RoleMapper::getRole
     */
    public function testGetRole()
    {
        $res = $this->object->getRole();
        $this->assertInstanceOf('Zend\Permissions\Acl\Role\RoleInterface', $res);
        $this->assertEquals(RoleMapperInterface::BUILT_IN_NOT_AUTHENTICATED_CLIENT, $res->getRoleId());
    }

    public function testGetRoleWithIdentity()
    {
        $res = $this->object->getRole('any');
        $this->assertInstanceOf('Zend\Permissions\Acl\Role\RoleInterface', $res);
        $this->assertEquals(RoleMapperInterface::BUILT_IN_AUTHENTICATED_CLIENT, $res->getRoleId());
    }

    public function testGetRoleWithResourceStorageHavingRole()
    {
        $identity = 'foo';
        $rowResultObject = new \stdClass;
        $rowResultObject->role = 'admin';
        $resourceStorage = $this->getMock('Flower\AccessControl\AuthClient\ResourceStorageInterface');
        $this->object->setResourceStorage($resourceStorage);
        $resourceStorage->expects($this->once())
                ->method('setIdentity')
                ->with($this->equalTo($identity));
        $resourceStorage->expects($this->once())
                ->method('getCurrentClientData')
                ->will($this->returnValue($rowResultObject));
        $role = $this->object->getRole($identity);
        $this->assertInstanceOf('Zend\Permissions\Acl\Role\RoleInterface', $role);
        $this->assertInstanceOf('Flower\AccessControl\RoleMapper\RoleContainer', $role);
        $this->assertEquals(RoleMapperInterface::BUILT_IN_CURRENT_CLIENT_AGGREGATE, $role->getRoleId());
        $parents = $role->getParents();
        $this->assertContains('admin', $parents);
    }

    public function testGetRoleWithResourceStorageHavingRoles()
    {
        $identity = 'foo';
        $rowResultObject = new \stdClass;
        $rowResultObject->roles = array('editor', 'publisher');
        $resourceStorage = $this->getMock('Flower\AccessControl\AuthClient\ResourceStorageInterface');
        $this->object->setResourceStorage($resourceStorage);
        $resourceStorage->expects($this->once())
                ->method('setIdentity')
                ->with($this->equalTo($identity));
        $resourceStorage->expects($this->once())
                ->method('getCurrentClientData')
                ->will($this->returnValue($rowResultObject));
        $role = $this->object->getRole($identity);
        $this->assertInstanceOf('Zend\Permissions\Acl\Role\RoleInterface', $role);
        $this->assertInstanceOf('Flower\AccessControl\RoleMapper\RoleContainer', $role);
        $this->assertEquals(RoleMapperInterface::BUILT_IN_CURRENT_CLIENT_AGGREGATE, $role->getRoleId());
        $parents = $role->getParents();
        $this->assertContains('editor', $parents);
        $this->assertContains('publisher', $parents);
    }

    public function testGetRoleWithResourceStorageHavingSerializedRoles()
    {
        $identity = 'foo';
        $rowResultObject = new \stdClass;
        $rowResultObject->roles_serialized = serialize(array('editor', 'publisher'));
        $resourceStorage = $this->getMock('Flower\AccessControl\AuthClient\ResourceStorageInterface');
        $this->object->setResourceStorage($resourceStorage);
        $resourceStorage->expects($this->once())
                ->method('setIdentity')
                ->with($this->equalTo($identity));
        $resourceStorage->expects($this->once())
                ->method('getCurrentClientData')
                ->will($this->returnValue($rowResultObject));
        $role = $this->object->getRole($identity);
        $this->assertInstanceOf('Zend\Permissions\Acl\Role\RoleInterface', $role);
        $this->assertInstanceOf('Flower\AccessControl\RoleMapper\RoleContainer', $role);
        $this->assertEquals(RoleMapperInterface::BUILT_IN_CURRENT_CLIENT_AGGREGATE, $role->getRoleId());
        $parents = $role->getParents();
        $this->assertContains('editor', $parents);
        $this->assertContains('publisher', $parents);
    }

    public function testGetRoleWithResourceStorageHavingRolesWithFilter()
    {
        $identity = 'foo';
        $prefix = 'example';
        $filter = new RolePrefixFilter;
        $filter->setPrefix($prefix);
        $this->object->setRoleFilter($filter);
        $rowResultObject = new \stdClass;
        $rowResultObject->roles = array('example.editor', 'post.publisher', 'example.approver');
        $resourceStorage = $this->getMock('Flower\AccessControl\AuthClient\ResourceStorageInterface');
        $this->object->setResourceStorage($resourceStorage);
        $resourceStorage->expects($this->once())
                ->method('setIdentity')
                ->with($this->equalTo($identity));
        $resourceStorage->expects($this->once())
                ->method('getCurrentClientData')
                ->will($this->returnValue($rowResultObject));
        $role = $this->object->getRole($identity);
        $this->assertInstanceOf('Zend\Permissions\Acl\Role\RoleInterface', $role);
        $this->assertInstanceOf('Flower\AccessControl\RoleMapper\RoleContainer', $role);
        $this->assertEquals(RoleMapperInterface::BUILT_IN_CURRENT_CLIENT_AGGREGATE, $role->getRoleId());
        $parents = $role->getParents();
        $this->assertCount(3, $parents);
        $this->assertContains(RoleMapperInterface::BUILT_IN_AUTHENTICATED_CLIENT ,$parents);
        $this->assertContains('example.editor', $parents);
        $this->assertContains('example.approver', $parents);
    }
}
