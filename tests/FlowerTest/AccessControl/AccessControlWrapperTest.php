<?php
namespace FlowerTest\AccessControl;

use Flower\AccessControl\AccessControlWrapper;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-14 at 14:04:43.
 */
class AccessControlWrapperTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AccessControlWrapper
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new AccessControlWrapper;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\AccessControl\AccessControlWrapper::setAccessControlService
     */
    public function testSetAccessControlService()
    {
        $ref = new \ReflectionObject($this->object);
        $prop = $ref->getProperty('service');
        $prop->setAccessible(true);
        $service = $this->getMock('Flower\AccessControl\AccessControlService');
        $this->object->setAccessControlService($service);
        $this->assertSame($service, $prop->getValue($this->object));
    }

    /**
     * @depends testSetAccessControlService
     * @covers Flower\AccessControl\AccessControlWrapper::getAccessControlService
     */
    public function testGetAccessControlService()
    {
        $service = $this->getMock('Flower\AccessControl\AccessControlService');
        $this->object->setAccessControlService($service);
        $res = $this->object->getAccessControlService();
        $this->assertSame($service, $res);
    }
    
    /**
     * @expectedException Flower\AccessControl\Exception\RuntimeException
     */
    public function testWrapWithoutService()
    {
        $resource = $this->getMock('Zend\Permissions\Acl\Resource\ResourceInterface');
        $this->object->wrap($resource);
    }
    
    /**
     * @expectedException Flower\AccessControl\Exception\RuntimeException
     */
    public function testWrapUnknownObject()
    {
        $object = new \stdClass;
        $this->object->wrap($object);
    }
    
    /**
     * @depends testSetAccessControlService
     * @covers Flower\AccessControl\AccessControlWrapper::wrap
     * 
     */
    public function testWrap()
    {
        $service = $this->getMock('Flower\AccessControl\AccessControlService');
        $resource = $this->getMock('Zend\Permissions\Acl\Resource\ResourceInterface');
        $acl = $this->getMock('Zend\Permissions\Acl\Acl');
        $role = $this->getMock('Zend\Permissions\Acl\Role\RoleInterface');
        $service->expects($this->once())
                ->method('getAcl')
                ->will($this->returnValue($acl));
        $service->expects($this->once())
                ->method('getRole')
                ->will($this->returnValue($role));
        $this->object->setAccessControlService($service);
        $wrapped = $this->object->wrap($resource);
        $this->assertInstanceOf('Flower\AccessControl\ServiceProxy', $wrapped);
        $this->assertSame($resource, $wrapped->passThrough());
    }
    

}
