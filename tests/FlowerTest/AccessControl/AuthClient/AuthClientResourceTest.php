<?php
namespace FlowerTest\AccessControl\AuthClient;

use Flower\AccessControl\AuthClient\AuthClientResource;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-14 at 19:09:18.
 */
class AuthClientResourceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AuthClientResource
     */
    protected $object;

    /**
     *
     * @var \ReflectionObject
     */
    protected $ref;
    
    /**
     *
     * @var \ReflectionProperty
     */
    protected $identityRef;
            
    /**
     *
     * @var \ReflectionProperty
     */
    protected $propertiesRef;

    /**
     *
     * @var \ReflectionProperty
     */
    protected $innerIdRef;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new AuthClientResource;
        $this->ref = new \ReflectionObject($this->object);
        $this->identityRef = $this->ref->getProperty('identity');
        $this->identityRef->setAccessible(true);
        $this->propertiesRef = $this->ref->getProperty('properties');
        $this->propertiesRef->setAccessible(true);
        $this->innerIdRef = $this->ref->getProperty('innerId');
        $this->innerIdRef->setAccessible(true);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    public function testInstanceOf()
    {
        $this->assertInstanceOf('Flower\Resource\ResourceClass\ResourceInterface', $this->object);
    }
    /**
     * @covers Flower\AccessControl\AuthClient\AuthClientResource::getType
     */
    public function testGetType()
    {
        $this->assertEquals('authClient', $this->object->getType());
    }
    
    /**
     * @covers Flower\AccessControl\AuthClient\AuthClientResource::setIdentity
     */
    public function testSetIdentity()
    {
        $identity = 'foo';
        
        $innerId = strtoupper(dechex(sprintf("%u", crc32($identity))));
        $this->object->setIdentity($identity);
        $this->assertEquals($identity, $this->identityRef->getValue($this->object));
        $this->assertEquals($identity, $this->propertiesRef->getValue($this->object)['identity']);
        $this->assertEquals($innerId, $this->innerIdRef->getValue($this->object));
        
    }
    
    /**
     * 
     * @expectedException Flower\AccessControl\Exception\RuntimeException
     */
    public function testSetIdentityByNull()
    {
        $this->object->setIdentity();
    }
    
    public function testSetIdentityByNullInfluentialIdentity()
    {
        $identity = 'foo';
        $this->identityRef->setValue($this->object, $identity);
        $this->object->setIdentity();
        $innerId = strtoupper(dechex(sprintf("%u", crc32($identity))));
        $this->assertEquals($identity, $this->identityRef->getValue($this->object));
        $this->assertEquals($identity, $this->propertiesRef->getValue($this->object)['identity']);
        $this->assertEquals($innerId, $this->innerIdRef->getValue($this->object));
    }
    
    public function testSetIdentityByNullInfluentialProperty()
    {
        $identity = 'foo';
        $this->propertiesRef->setValue($this->object, array('identity' => $identity));
        $this->object->setIdentity();
        $innerId = strtoupper(dechex(sprintf("%u", crc32($identity))));
        $this->assertEquals($identity, $this->identityRef->getValue($this->object));
        $this->assertEquals($identity, $this->propertiesRef->getValue($this->object)['identity']);
        $this->assertEquals($innerId, $this->innerIdRef->getValue($this->object));
    }
    
    
    public function testSetIdentityByNullInfluentialData()
    {
        $identity = 'foo';
        $data = new \stdClass;
        $data->identity = $identity;
        $this->object->setData($data);
        
        $this->object->setIdentity();
        $innerId = strtoupper(dechex(sprintf("%u", crc32($identity))));
        $this->assertEquals($identity, $this->identityRef->getValue($this->object));
        $this->assertEquals($identity, $this->propertiesRef->getValue($this->object)['identity']);
        $this->assertEquals($innerId, $this->innerIdRef->getValue($this->object));
    }
            

    /**
     * @depends testSetIdentity
     * @covers Flower\AccessControl\AuthClient\AuthClientResource::getIdentity
     * 
     */
    public function testGetIdentity()
    {
        $identity = 'foo';
        $this->object->setIdentity($identity);
        $this->assertEquals($identity, $this->object->getIdentity());
    }

    /**
     * @covers Flower\AccessControl\AuthClient\AuthClientResource::getInnerId
     */
    public function testGetInnerId()
    {
        $innerId = '7FFFFFFF';
        $this->innerIdRef->setValue($this->object, $innerId);
        $this->assertEquals($innerId, $this->object->getInnerId());
    }

    /**
     * @depends testSetIdentity
     * @covers Flower\AccessControl\AuthClient\AuthClientResource::getResourceId
     */
    public function testGetResourceId()
    {
        $identity = 'foo';
        $this->object->setIdentity($identity);
        $type = $this->object->getType();
        $innerId = $this->object->getInnerId();
        $prop = $this->ref->getProperty('delimiter');
        $prop->setAccessible(true);
        $delimiter = $prop->getValue();
        $this->assertEquals($type . $delimiter . $innerId, $this->object->getResourceId());
    }


    /**
     * @covers Flower\AccessControl\AuthClient\AuthClientResource::setData
     */
    public function testSetData()
    {
        $data = new \stdClass;
        $data->foo = 'bar';
        $prop = $this->ref->getProperty('data');
        $prop->setAccessible(true);
        $this->object->setData($data);
        $this->assertEquals($data, $prop->getValue($this->object));
    }

    /**
     * @depends testSetData
     * @covers Flower\AccessControl\AuthClient\AuthClientResource::toString
     */
    public function testToString()
    {
        $data = new \stdClass;
        $data->foo = 'bar';
        $this->object->setData($data);
        $json = \Zend\Json\Json::encode($data);
        $this->assertEquals($json, $this->object->toString());
    }
    
    /**
     * @depends testSetData
     * 
     */
    public function testToStringToStringObject()
    {
        $data = $this->getMock('stdClass', array('toString'));
        $data->expects($this->once())
                ->method('toString')
                ->will($this->returnValue('foo'));
        $this->object->setData($data);
        $this->assertEquals('foo', $this->object->toString());
    }
    
    /**
     * @depens testToString
     * @covers Flower\AccessControl\AuthClient\AuthClientResource::__toString
     */
    public function test__toString()
    {
        $data = new \stdClass;
        $data->foo = 'bar';
        $this->object->setData($data);
        $this->assertEquals($this->object->toString(), $this->object->__toString());
    }
}
