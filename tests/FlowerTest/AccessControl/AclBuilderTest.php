<?php
namespace FlowerTest\AccessControl;

use Flower\AccessControl\AclBuilder;
use Flower\Test\TestTool;
use Zend\Permissions\Acl\Acl as ZendAcl;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-25 at 08:58:05.
 */
class AclBuilderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AclBuilder
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new AclBuilder;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\AccessControl\AclBuilder::setAcl
     */
    public function testSetAcl()
    {
        $acl = $this->getMock('Zend\\Permissions\\Acl\\Acl');
        $this->object->setAcl($acl);
        $this->assertSame($acl, TestTool::getPropertyValue($this->object, 'acl'));
    }

    /**
     * @covers Flower\AccessControl\AclBuilder::setGenericRoles
     */
    public function testSetGenericRoles()
    {
        $expects = array('foo' => 'bar');
        $this->object->setGenericRoles($expects);
        $this->assertEquals($expects, TestTool::getPropertyValue($this->object, 'genericRoles'));
    }

    /**
     * @covers Flower\AccessControl\AclBuilder::setGenericResources
     */
    public function testSetGenericResources()
    {
        $expects = array('foo' => 'bar');
        $this->object->setGenericResources($expects);
        $this->assertEquals($expects, TestTool::getPropertyValue($this->object, 'genericResources'));
    }

    /**
     * @covers Flower\AccessControl\AclBuilder::setGenericRules
     */
    public function testSetGenericRules()
    {
        $expects = array('foo' => 'bar');
        $this->object->setGenericRules($expects);
        $this->assertEquals($expects, TestTool::getPropertyValue($this->object, 'genericRules'));
    }


    /**
     * @covers Flower\AccessControl\AclBuilder::setGenerics
     */
    public function testSetGenerics()
    {
        $roles = array('foo' => 1);
        $resources = array('baz' => 2);
        $rules = array('bar' => 3);
        $this->object->setGenerics($roles, $resources, $rules);
        $this->assertEquals($roles, TestTool::getPropertyValue($this->object, 'genericRoles'));
        $this->assertEquals($rules, TestTool::getPropertyValue($this->object, 'genericRules'));
        $this->assertEquals($resources, TestTool::getPropertyValue($this->object, 'genericResources'));
    }

    /**
     * @covers Flower\AccessControl\AclBuilder::addResources
     */
    public function testAddResources()
    {
        $resources = array(
            'document',
            'compe',
            /**
             * プロパティ内継承
             * リソース名のドットがプロパティとかぶっている点に注意を要する。
             * foo.bar プロパティのcompeリソースは
             * fooプロパティの bar.compe リソースとシステム上で区別されない。
             *
             * ただし、fooプロパティの所有者は、barリソースと下位foo.barプロパティを同時には持たないから
             * 上位プロパティの管理者がオカシナことをしなければ問題は生じない。
             * つまり、プロパティとリソースはリソースクラス内のコンポジットパターンになっている点に留意すること。
             */
            'compe_score' => 'compe',
        );
        $expects = Array (
            'foo.compe',
            'foo',
            'foo.bar',
            'foo.bar.document',
            'foo.bar.compe',
            'foo.bar.compe_score',
            'foo.school',
            'foo.bar.school',
            'foo.document',
        );
        $property = 'foo.bar';
        $acl = new ZendAcl;
        $this->object->setAcl($acl);
        /**
         * 事前にparentリソースを登録しておくと、親プロパティのリソースを継承して登録します。
         * 後付では継承されない点に注意してください。
         */
        $acl->addResource('foo.compe');
        $this->object->addResources($resources, $property);
        //垂直継承
        $acl->addResource('foo.school', 'foo');


        //垂直継承の指定によるリソース追加だが、事前に水平継承されているので垂直継承の指定は無視されます。
        $acl->addResource('foo.document', 'foo');
        $this->object->addResources(array('document'), $property, true);

        /**
         * デフォルトは垂直継承
         * プロパティのリソースはそのままでは、プロパティを継承しない。
         * プロパティはフォルダ的役割であってリソースではない。
         */
        $this->assertFalse($acl->inheritsResource('foo.bar.compe', 'foo.bar'));
        /**
         * foo.compeへのアクセス権は、下部プロパティのfoo.bar.compeにも同一の権限を持つ。
         * 困る場合は、denyルールを設定する権利が、下部プロパティ権限者にあればよい。
         */
        $this->assertTrue($acl->inheritsResource('foo.bar.compe', 'foo.compe'));

        /**
         * 水平継承
         * foo.bar.schoolをfoo.schoolを継承して追加したい。
         */
        $this->object->addResources(array('school'), $property, false);

        //プロパティ内の継承は、配列のkey valueで行われる。
        $this->assertTrue($acl->inheritsResource('foo.bar.compe_score', 'foo.bar.compe'));
        //垂直方向の継承はない
        $this->assertFalse($acl->inheritsResource('foo.bar.school', 'foo.school'));

        //リソース一覧を確認
        sort($expects);
        $storedResources = $acl->getResources();
        sort($storedResources);
        $this->assertEquals($expects, $storedResources);
    }

    /**
     * @covers Flower\AccessControl\AclBuilder::addRoles
     */
    public function testAddRoles()
    {
        $roles = array(
            'guest',
            'staff',
            'compe_admin' => array('/guest', 'staff'),
            'writer' => 'staff',
            'owner' => 'staff', //ownerはadminを指定できる、granter　しかし、誤操作を防ぐため他の権限は不要
            'admin' => 'staff',
        );
        $property = 'foo.bar';
        $acl = new ZendAcl;

        /**
         * guestはグローバルを継承するように、/guestという指定になっている。
         * 原理的に、/adminを継承するように設定すれば、全権を取れるから、
         * プロパティの管理者に権限付与を許可する場合は、指定内容に注意すること。
         */
        $acl->addRole('guest');
        $this->object->setAcl($acl);
        $this->object->addRoles($roles, $property);
        $this->assertContains('foo.bar.admin', $acl->getRoles());
    }

    /**
     * @covers Flower\AccessControl\AclBuilder::addRoles
     * @expectedException Zend\Permissions\Acl\Exception\InvalidArgumentException
     */
    public function testAddRolesWithMissingParents()
    {
        $roles = array(
            'admin' => array('staff', 'writer'),
        );
        $property = 'foo.bar';
        $acl = new ZendAcl;
        $this->object->setAcl($acl);
        $this->object->addRoles($roles, $property);
    }

    /**
     * @covers Flower\AccessControl\AclBuilder::addRules
     */
    public function testAddRules()
    {
        $acl = new ZendAcl;
        $allow = ZendAcl::TYPE_ALLOW;
        $deny = ZendAcl::TYPE_DENY;
        $property = 'foo.bar';
        $resources = array(
            'document',
            'comment',
        );
        $roles = array(
            'staff',
            'writer',
            'admin' => array('staff', 'writer'),
        );
        $rules = array(
            'writer' => array($allow, 'writer', 'document', array('create', 'update', 'post', 'post_as', 'push_file', 'push_image')),
            'admin' => array($allow, 'admin', null, null), //リソースは限定するべきですね。
        );

        $this->object->setAcl($acl);
        $this->object->addRoles($roles, $property);
        $this->object->addResources($resources, $property);
        $this->object->addRules($rules, $property);

        $pRules = TestTool::getPropertyValue($acl, 'rules');

        $this->assertTrue($acl->isAllowed('foo.bar.writer', 'foo.bar.document', 'create'));
        $this->assertFalse($acl->isAllowed('foo.bar.writer', null, 'create'));
        $this->assertFalse($acl->isAllowed('foo.bar.admin', null, null));
    }

    /**
     * @covers Flower\AccessControl\AclBuilder::build
     *
     * public function build($property, $roles, $resources, $rules, $resourceInheritVertical = true)
     *
     * public function setRule(
        $operation,
        $type,
        $roles = null,
        $resources = null,
        $privileges = null,
        Assertion\AssertionInterface $assert = null
    )
     */
    public function testBuild()
    {
        $acl = new ZendAcl;
        $this->object->setAcl($acl);
        $parentProperty = 'foo';
        $property = 'foo.bar';
        $brother = 'foo.baz';
        $roles = ['admin', 'user'];
        $resources = ['site', 'document'];
        $rules = [
            [
                'TYPE_ALLOW',
                'admin',
                //リソースそのものへの全権を与えたい場合、nullと全リソースの両方を指定する。
                array_merge([null], $resources),
                null,
            ],
            [
                'TYPE_ALLOW',
                'user',
                'document',
                'create',
                null,
                'usage',
            ],
        ];

        $this->object->build('', $roles, $resources, $rules);
        $this->object->build($parentProperty, $roles, $resources, $rules);
        $this->object->build($property, $roles, $resources, $rules);
        $this->object->build($brother, $roles, $resources, $rules);

        /**
         * addResource test
         */
        //foo.barはfooを継承している。
        $this->assertTrue($acl->inheritsResource('foo.bar', 'foo'));
        //デフォルトは垂直継承
        $this->assertTrue($acl->inheritsResource('foo.document', 'document'));
        $this->assertTrue($acl->inheritsResource('foo.bar.document', 'foo.document'));

        //自動的にプロパティ上のroleが作成される。
        $this->assertTrue($acl->hasRole('user'));
        $this->assertTrue($acl->hasRole('foo.user'));
        $this->assertTrue($acl->hasRole('foo.bar.user'));

        //userはcreate権限がある
        $this->assertTrue($acl->isAllowed('user', 'document', 'create'));
        //foo.adminは、foo.documentに全権を持っている
        $this->assertTrue($acl->isAllowed('foo.admin', 'foo', 'special'));
        //foo.adminは、foo.documentに全権を持っている
        $this->assertTrue($acl->isAllowed('foo.admin', 'foo.document', 'special'));
        //foo.adminは、foo.bar.adminと同等
        $this->assertTrue($acl->isAllowed('foo.admin', 'foo.bar.document', 'special'));
        $this->assertTrue($acl->isAllowed('foo.admin', 'foo.baz.document', 'special'));
        //foo.adminでも上位リソースへのアクセス権はない。
        $this->assertFalse($acl->isAllowed('foo.admin', 'document', 'special'));
        //foo.userはfoo.documentへのcreate権がある。
        $this->assertTrue($acl->isAllowed('foo.user', 'foo.document', 'create'));
        //foo.userはfoo.siteへのmanage権がない。
        $this->assertFalse($acl->isAllowed('foo.user', 'foo.site', 'manage'));
        //foo.userはfooプロパティへのusage権がある
        $this->assertTrue($acl->isAllowed('foo.user', 'foo', 'usage'));
    }

    /**
     * @covers Flower\AccessControl\AclBuilder::propTreeBuild
     *
     * public function build($property, $roles, $resources, $rules, $resourceInheritVertical = true)
     *
     * public function setRule(
        $operation,
        $type,
        $roles = null,
        $resources = null,
        $privileges = null,
        Assertion\AssertionInterface $assert = null
    )
     */
    public function testPropTreeBuild()
    {
        $acl = new ZendAcl;
        $this->object->setAcl($acl);
        $property = 'foo.bar';
        $brother = 'foo.baz';
        $roles = ['admin', 'user'];
        $resources = ['site', 'document'];
        $rules = [
            [
                'TYPE_ALLOW',
                'admin',
                //リソースそのものへの全権を与えたい場合、nullと全リソースの両方を指定する。
                array_merge([null], $resources),
                null,
            ],
            [
                'TYPE_ALLOW',
                'user',
                'document',
                'create',
                null,
                'usage',
            ],
        ];

        //true,trueがデフォルト
        $this->object->propTreeBuild([$property, $brother], $roles, $resources, $rules, true, true);

        /**
         * addResource test
         */
        //foo.barはfooを継承している。
        $this->assertTrue($acl->inheritsResource('foo.bar', 'foo'));
        //デフォルトは垂直継承
        $this->assertTrue($acl->inheritsResource('foo.document', 'document'));
        $this->assertTrue($acl->inheritsResource('foo.bar.document', 'foo.document'));

        //自動的にプロパティ上のroleが作成される。
        $this->assertTrue($acl->hasRole('user'));
        $this->assertTrue($acl->hasRole('foo.user'));
        $this->assertTrue($acl->hasRole('foo.bar.user'));

        //userはcreate権限がある
        $this->assertTrue($acl->isAllowed('user', 'document', 'create'));
        //foo.adminは、foo.documentに全権を持っている
        $this->assertTrue($acl->isAllowed('foo.admin', 'foo', 'special'));
        //foo.adminは、foo.documentに全権を持っている
        $this->assertTrue($acl->isAllowed('foo.admin', 'foo.document', 'special'));
        //foo.adminは、foo.bar.adminと同等
        $this->assertTrue($acl->isAllowed('foo.admin', 'foo.bar.document', 'special'));
        $this->assertTrue($acl->isAllowed('foo.admin', 'foo.baz.document', 'special'));
        //foo.adminでも上位リソースへのアクセス権はない。
        $this->assertFalse($acl->isAllowed('foo.admin', 'document', 'special'));
        //foo.userはfoo.documentへのcreate権がある。
        $this->assertTrue($acl->isAllowed('foo.user', 'foo.document', 'create'));
        //foo.userはdocumentへのcreate権がない。
        $this->assertFalse($acl->isAllowed('foo.user', 'document', 'create'));
        //foo.userはfoo.siteへのmanage権がない。
        $this->assertFalse($acl->isAllowed('foo.user', 'foo.site', 'manage'));
        //foo.userはfooプロパティへのusage権がある
        $this->assertTrue($acl->isAllowed('foo.user', 'foo', 'usage'));
        //foo.bar.userはfooプロパティへのusage権がある
        $this->assertTrue($acl->isAllowed('foo.bar.user', 'foo', 'usage'));
        //foo.bar.userはfoo.bar.documentへのcreate権がある
        $this->assertTrue($acl->isAllowed('foo.bar.user', 'foo.bar.document', 'create'));
        //foo.bar.userは兄弟リソースへのcreate権がない
        $this->assertFalse($acl->isAllowed('foo.bar.user', 'foo.baz.document', 'create'));
        //foo.bar.userは上位リソースのdocumentへのcreate権がない
        $this->assertFalse($acl->isAllowed('foo.bar.user', 'foo.document', 'create'));
    }
}
