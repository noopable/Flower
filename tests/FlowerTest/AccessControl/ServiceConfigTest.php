<?php
namespace FlowerTest\AccessControl;

use Flower\AccessControl\ServiceConfig;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-14 at 21:54:50.
 */
class ServiceConfigTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\AccessControl\ServiceConfig::configure
     * @todo   Implement testConfigure().
     */
    public function testConfigure()
    {
        $config = array(
            'acl_path' => __DIR__,
            'acl_loader' => 'Flower\AccessControl\AclLoader',
            'method_privilege_maps' => array(
                'fooClass' => array(
                    'methodA' => 'privilege1',
                    'methodB' => 'privilege2',
                ),
                'barClass' => array(
                    'methodC' => 'privilege1',
                    'methodD' => 'privilege3',
                ),
            ),
            'under_access_controls' => array(
                'fooClass', 'barClass'
            ),
        );
        $service = $this->getMock('Flower\AccessControl\AccessControlService');
        $service->expects($this->once())
                ->method('setAclScriptPath')
                ->with($this->equalTo(__DIR__));
        $service->expects($this->once())
                ->method('setAclLoader')
                ->with($this->isInstanceOf('Flower\AccessControl\AclLoader'));
        $service->expects($this->exactly(2))
                ->method('addMethodPrivilegeMap');
        $service->expects($this->exactly(2))
                ->method('addUnderAccessControl');
        $oConfig = new ServiceConfig($config);
        $oConfig->configure($service);
    }
}
