<?php
namespace FlowerTest\AccessControl;

use Flower\AccessControl\AuthClient\ResourceStorage;
use Flower\AccessControl\AccessControlService;
use Flower\AccessControl\ServiceConfig;
use Flower\Test\TestTool;
use Zend\Authentication\AuthenticationService;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-14 at 21:54:50.
 */
class ServiceConfigTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    /**
     * @covers Flower\AccessControl\ServiceConfig::__construct
     */
    public function testConstructor()
    {
        $sl = $this->getMock('Zend\ServiceManager\ServiceLocatorInterface');
        $config = array(
            'service_locator' => $sl,
            'foo' => 'bar',
        );
        $oConfig = new ServiceConfig($config);
        $this->assertEquals(array('foo' => 'bar'), TestTool::getPropertyValue($oConfig, 'config'));
        $this->assertSame($sl, TestTool::getPropertyValue($oConfig, 'serviceLocator'));
    }
    /**
     * @covers Flower\AccessControl\ServiceConfig::configure
     * @todo   Implement testConfigure().
     */
    public function testConfigure()
    {
        $config = array(
            'acl_path' => __DIR__,
            'acl_loader' => 'Flower\AccessControl\AclLoader',
            'method_privilege_maps' => array(
                'fooClass' => array(
                    'methodA' => 'privilege1',
                    'methodB' => 'privilege2',
                ),
                'barClass' => array(
                    'methodC' => 'privilege1',
                    'methodD' => 'privilege3',
                ),
            ),
            'under_access_controls' => array(
                'fooClass', 'barClass'
            ),
        );
        $service = $this->getMock('Flower\AccessControl\AccessControlService');
        $service->expects($this->once())
                ->method('setAclScriptPath')
                ->with($this->equalTo(__DIR__));
        $service->expects($this->once())
                ->method('setAclLoader')
                ->with($this->isInstanceOf('Flower\AccessControl\AclLoader'));
        $service->expects($this->exactly(2))
                ->method('addMethodPrivilegeMap');
        $service->expects($this->exactly(2))
                ->method('addUnderAccessControl');
        $oConfig = new ServiceConfig($config);
        $oConfig->configure($service);
    }
    
    /**
     * @covers Flower\AccessControl\ServiceConfig::configureWithServiceLocator
     */
    public function testConfigureWithServiceLocatorWithoutServiceLocator()
    {
        $config = array();
        $oConfig = new ServiceConfig($config);
        $service = $this->getMock('Flower\AccessControl\AccessControlService');
        $this->assertNull($oConfig->configureWithServiceLocator($service));
    }
    /**
     * @covers Flower\AccessControl\ServiceConfig::configureWithServiceLocator
     */
    public function testConfigureWithServiceLocatorWithConf()
    {
        $sl = $this->getMock('Zend\ServiceManager\ServiceLocatorInterface');
        $authService = $this->getMock('Zend\Authentication\AuthenticationService');
        $service = $this->getMock('Flower\AccessControl\AccessControlService');
        $config = array(
            'service_locator' => $sl,
            'auth_service' => 'authService',
            // @todo yet another options need test
        );
        $sl->expects($this->once())
                ->method('has')
                ->with($this->equalTo('authService'))
                ->will($this->returnValue(true));
        $sl->expects($this->once())
                ->method('get')
                ->with($this->equalTo('authService'))
                ->will($this->returnValue($authService));
        $service->expects($this->once())
                ->method('setAuthService')
                ->with($this->equalTo($authService));
        $oConfig = new ServiceConfig($config);
        $oConfig->configure($service);
    }
    
    /**
     * @covers Flower\AccessControl\ServiceConfig::combileResourceManager
     */
    public function testCombileResourceManager()
    {
        $oConfig = new ServiceConfig(array());
        $resourceManager = $this->getMock('Flower\Resource\Manager\ManagerInterface');
        $resourceStorage = $this->getMock('Flower\AccessControl\AuthClient\ResourceStorage', array(),array(), '',false);
        $authService = $this->getMock('Zend\Authentication\AuthenticationService');
        $sessionStorage = $this->getMock('Zend\Authentication\Storage\Session');
        $resourceStorage->expects($this->once())
                ->method('setResourceManager')
                ->with($this->equalTo($resourceManager));
        $authService->expects($this->once())
                ->method('getStorage')
                ->will($this->returnValue($sessionStorage));
        $authService->expects($this->once())
                ->method('setStorage')
                ->with($this->isInstanceOf('Zend\Authentication\Storage\Chain'));
        $oConfig->combileResourceManager($resourceManager, $resourceStorage, $authService);
    }
    
    /**
     * @covers Flower\AccessControl\ServiceConfig::combileResourceManager
     */
    public function testCombileResourceManagerWithRealAuthService()
    {
        $oConfig = new ServiceConfig(array());
        $resourceManager = $this->getMock('Flower\Resource\Manager\ManagerInterface');
        $resourceStorage = $this->getMock('Flower\AccessControl\AuthClient\ResourceStorage', array(),array(), '',false);
        $authService = new AuthenticationService;
        $resourceStorage->expects($this->once())
                ->method('setResourceManager')
                ->with($this->equalTo($resourceManager));
        $oConfig->combileResourceManager($resourceManager, $resourceStorage, $authService);
        $authStorage = $authService->getStorage();
        $this->assertInstanceOf('Zend\Authentication\Storage\Chain', $authStorage);
        $storageQueue = TestTool::getPropertyValue($authStorage, 'storageChain');
        $this->assertInstanceOf('Zend\Authentication\Storage\Session', $storageQueue->top());
        $this->assertEquals(2, $storageQueue->count());
        $this->assertTrue($storageQueue->contains($resourceStorage));
    }
    
    /**
     * @covers Flower\AccessControl\ServiceConfig::combileResourceManager
     */
    public function testCombileResourceManagerWithConcretes()
    {
        $oConfig = new ServiceConfig(array());
        $resourceManager = $this->getMock('Flower\Resource\Manager\ManagerInterface');
        $accessControlService = new AccessControlService;
        $resourceStorage = new ResourceStorage($accessControlService);
        $authService = new AuthenticationService;
        $oConfig->combileResourceManager($resourceManager, $resourceStorage, $authService);
        $authStorage = $authService->getStorage();
        $this->assertInstanceOf('Zend\Authentication\Storage\Chain', $authStorage);
        $storageQueue = TestTool::getPropertyValue($authStorage, 'storageChain');
        $this->assertInstanceOf('Zend\Authentication\Storage\Session', $storageQueue->top());
        $this->assertEquals(2, $storageQueue->count());
        $this->assertTrue($storageQueue->contains($resourceStorage));
        $this->assertSame($resourceManager, $resourceStorage->getResourceManager());
    }
}
