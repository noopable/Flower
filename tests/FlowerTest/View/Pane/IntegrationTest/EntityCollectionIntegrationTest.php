<?php
namespace FlowerTest\View\Pane\IntegrationTest;

use Flower\View\Pane\PaneEvent;
use Flower\View\Pane\Service\ConfigFileListenerFactory;
use FlowerTest\Bootstrap;
use Zend\ServiceManager\ServiceManager;
use Zend\Mvc\Service\ServiceManagerConfig;
use Zend\View\Renderer\PhpRenderer;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-06 at 23:02:41.
 */
class EntityCollectionIntegrationTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ConfigFileListenerFactory
     */
    protected $object;

    protected $serviceLocator;

    protected $paneCacheStorage;

    protected $renderCacheStorage;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $config = Bootstrap::getServiceManager()->get('ApplicationConfig');
        if (!isset($config['module_listener_options']['config_static_paths'])) {
            $config['module_listener_options']['config_static_paths'] = array();
        }
        $config['module_listener_options']['config_static_paths'][] = __DIR__ . '/TestAsset/collection_integration.config.php';
        $serviceManager = new ServiceManager(new ServiceManagerConfig);
        $serviceManager->setService('ApplicationConfig', $config);
        $serviceManager->get('ModuleManager')->loadModules();
        $serviceManager->get('Application')->bootstrap();
        $this->serviceLocator = $serviceManager;
        $this->helperManager = $this->serviceLocator->get('ViewHelperManager');
        $viewManager = $this->serviceLocator->get('ViewManager');
        $this->view = $viewManager->getRenderer();
        $this->manager = $this->view->plugin('npPaneManager');
    }

    public function tearDown()
    {
        $this->manager->refresh('collection');
    }

    public function testCanGetCollectionPane()
    {
        $data = array(
            new \stdClass,
            array('foo' => 'bar'),
        );
        $collection = new \RecursiveArrayIterator($data);

        $pane = $this->manager->get('collection');
        $pane->setCollection($collection);
        $this->assertEquals('<div>', $pane->containerBegin());
        $this->assertEquals('</div>', $pane->containerEnd());
        $this->assertInstanceOf('Flower\View\Pane\PaneClass\PaneInterface', $pane);
        //Managerのレジストリ(メンバ変数)に入っているので、上記のsetCollectionがそのまま生きる。
        $res = $this->manager->render('collection');
        $expected =
'<!-- begin Renderer -->
<div>
  <!-- start content CallbackRender -->
  <div>
  <div>
  <!-- start content entity -->
entity.phtml
array(0) {
}
  <!-- end content entity -->
  </div>
  </div>
  <!-- end content CallbackRender -->
  <!-- start content CallbackRender -->
  <div>
  <div>
  <!-- start content entity -->
entity.phtml
array(1) {
  ["foo"]=>
  string(3) "bar"
}
  <!-- end content entity -->
  </div>
  </div>
  <!-- end content CallbackRender -->
</div>
<!-- end Renderer -->
';
        $this->assertEquals(str_replace("\r\n", "\n", $expected), $res);

        //private teardown
        $this->manager->refresh('collection');
    }

}
