<?php
namespace FlowerTest\View\Pane\Entity;

use Flower\View\Pane\Entity\ApplicatableCallbackCollection;
use Flower\View\Pane\Factory\AnchorPaneFactory;
use Flower\View\Pane\PaneClass\EntityAnchor;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-21 at 20:18:56.
 */
class ApplicatableCallbackCollectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ApplicatableCallbackCollection
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testConstruct()
    {
        $callback = function ($pane, $params = array()) {
            $pane->href = sprintf($pane->href, $params['href']);
            $pane->attributes['gumby-goto'] = sprintf($pane->attributes['gumby-goto'], $params['target']);
            $pane->label = sprintf($pane->label, $params['label']);
            AnchorPaneFactory::parseBeginEnd($pane, $params);
        };
        $array = array(
            array(
                'href' => '#c1',
                'target' => 'c1',
                'label' => 'c1-label',
            ),
            array(
                'href' => '#c2',
                'target' => 'c2',
                'label' => 'c2-label',
            ),
        );

        return new ApplicatableCallbackCollection($callback, $array);

    }
    /**
     * @depends testConstruct
     * @covers Flower\View\Pane\Entity\ApplicatableCallbackCollection::getIterator
     */
    public function testGetIterator($object)
    {
        $iterator = $object->getIterator();
        $entity = $iterator->current();
        $this->assertInstanceOf('Flower\View\Pane\Entity\ApplicatableCallbackEntity', $entity);
        $pane = new EntityAnchor;
        $pane->href = '%s';
        $pane->attributes['gumby-goto'] = '-%s-';
        $pane->label = ' label = %s ';
        $entity->apply($pane);
        $this->assertEquals('#c1', $pane->href);
        $this->assertEquals('-c1-', $pane->attributes['gumby-goto']);
        $this->assertEquals(' label = c1-label ', $pane->label);
    }
}
