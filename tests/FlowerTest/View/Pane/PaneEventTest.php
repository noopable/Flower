<?php
namespace Flower\View\Pane;

use Flower\Test\TestTool;
use Flower\View\Pane\PaneEvent;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-05 at 15:56:26.
 */
class PaneEventTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PaneEvent
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PaneEvent;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\View\Pane\PaneEvent::setManager
     */
    public function testSetManager()
    {
        $manager = $this->getMock('Flower\View\Pane\PaneManager');
        $this->object->setManager($manager);
        $this->assertSame($manager, TestTool::getPropertyValue($this->object, 'manager'));
    }

    /**
     * @depends testSetManager
     * @covers Flower\View\Pane\PaneEvent::getManager
     */
    public function testGetManager()
    {
        $manager = $this->getMock('Flower\View\Pane\PaneManager');
        $this->object->setManager($manager);
        $this->assertSame($manager, $this->object->getManager());
    }

    /**
     * @covers Flower\View\Pane\PaneEvent::setPaneId
     */
    public function testSetPaneId()
    {
        $paneId = 'foo';
        $this->object->setPaneId($paneId);
        $this->assertEquals($paneId, TestTool::getPropertyValue($this->object, 'paneId'));
    }

    /**
     * @depends testSetPaneId
     * @covers Flower\View\Pane\PaneEvent::getPaneId
     */
    public function testGetPaneId()
    {
        $paneId = 'foo';
        $this->object->setPaneId($paneId);
        $this->assertEquals($paneId, $this->object->getPaneId());
    }

    /**
     *
     * @covers Flower\View\Pane\PaneEvent::addErrorMessage
     */
    public function testAddErrorMessage()
    {
        $message = 'error';
        $this->object->addErrorMessage($message);
        $this->assertContains($message, TestTool::getPropertyValue($this->object, 'errorMessages'));
    }

    /**
     *
     * @covers Flower\View\Pane\PaneEvent::getErrorMessages
     */
    public function testGetErrorMessages()
    {
        $message1 = 'error1';
        $message2 = 'error2';
        $this->object->addErrorMessage($message1);
        $this->object->addErrorMessage($message2);
        $this->assertEquals(array($message1, $message2), $this->object->getErrorMessages());
    }

    /**
     *
     * @covers Flower\View\Pane\PaneEvent::hasError
     */
    public function testHasError()
    {
        $this->assertFalse($this->object->hasError());
        $message = 'error';
        $this->object->addErrorMessage($message);
        $this->assertTrue($this->object->hasError());
    }

    /**
     *
     * @covers Flower\View\Pane\PaneEvent::setResult
     */
    public function testSetResult()
    {
        $result = new \stdClass;
        $this->object->setResult($result);
        $this->assertEquals($result, TestTool::getPropertyValue($this->object, 'result'));
    }

    /**
     * @depends testSetResult
     * @covers Flower\View\Pane\PaneEvent::getResult
     */
    public function testGetResult()
    {
        $result = new \stdClass;
        $this->object->setResult($result);
        $this->assertEquals($result, $this->object->getResult());
    }

    /**
     *
     * @covers Flower\View\Pane\PaneEvent::hasResult
     */
    public function testHasResult()
    {
        $this->assertFalse($this->object->hasResult());
        $result = new \stdClass;
        $this->object->setResult($result);
        $this->assertTrue($this->object->hasResult());
    }

}
