<?php

/*
 *
 *
 * @copyright Copyright (c) 2013-2014 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */
namespace FlowerTest\View\Pane\PaneClass;

use Flower\Test\TestTool;
use Flower\View\Pane\PaneClass\Pane;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-05 at 15:22:58.
 */
class PaneTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Pane
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Pane;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Flower\View\Pane\Pane::setPaneId
     */
    public function testSetPaneId()
    {
        $paneId = 'foo';
        $this->object->setPaneId($paneId);
        $this->assertEquals($paneId, TestTool::getPropertyValue($this->object, 'paneId'));
    }

    /**
     * @depends testSetPaneId
     * @covers Flower\View\Pane\Pane::getPaneId
     */
    public function testGetPaneId()
    {
        $paneId = 'foo';
        $this->object->setPaneId($paneId);
        $this->assertEquals($paneId,  $this->object->getPaneId());
    }

    /**
     * @covers Flower\View\Pane\Pane::getOrder
     */
    public function testGetOrder()
    {
        $this->assertEquals(1, $this->object->getOrder());
    }

    /**
     * @covers Flower\View\Pane\Pane::insert
     * @todo   Implement testInsert().
     */
    public function testInsert()
    {
        $pane = new Pane;
        $this->assertFalse($pane->hasChildren());
        // Remove the following lines when you implement this test.
        //$this->assertTrue($this->object->current() instanceof \Flower\RecursivePriorityQueue);
        $this->assertFalse($this->object->hasChildren());
        $child = new Pane;
        $child->setPaneId('foo');
        $this->object->insert($child, 100);
        //RecursiveIterator must return a current entry has child
        $this->object->current()->insert(new Pane);
        $this->assertTrue($this->object->hasChildren());
        $registry = $this->object->getRegistry();
        $this->assertTrue(isset($registry->foo));
        $this->assertSame($child, $registry->foo);
    }

    /**
     * @covers Flower\View\Pane\Pane::setBegin
     */
    public function testSetBegin()
    {
        $this->object->setBegin('foo');
        $this->assertEquals('foo', $this->object->begin);
    }

    /**
     * @covers Flower\View\Pane\Pane::setEnd
     */
    public function testSetEnd()
    {
        $this->object->setEnd('bar');
        $this->assertEquals('bar', $this->object->end);
    }

    /**
     * @covers Flower\View\Pane\Pane::begin
     */
    public function testBegin()
    {
        $this->object->setBegin('foo');
        $this->assertEquals('foo', $this->object->begin());
    }

    /**
     * @covers Flower\View\Pane\Pane::end
     */
    public function testEnd()
    {
        $this->object->setEnd('bar');
        $this->assertEquals('bar', $this->object->end());
    }

    /**
     * @covers Flower\View\Pane\Pane::setOptions
     */
    public function testSetOptions()
    {
        $this->assertNull(TestTool::getPropertyValue($this->object, 'options'));
        $options = array('foo' => 'bar', 'bar' => 'baz');
        $this->object->setOptions($options);
        $this->assertEquals($options, TestTool::getPropertyValue($this->object, 'options'));
    }

    /**
     * @covers Flower\View\Pane\Pane::setOption
     */
    public function testSetOption()
    {
        $this->object->setOption('foo', 'bar');
        $this->assertEquals('bar', TestTool::getPropertyValue($this->object, 'options')['foo']);
    }

    /**
     * @covers Flower\View\Pane\Pane::getOption
     */
    public function testGetOption()
    {
        $this->object->setOption('foo', 'bar');
        $this->assertEquals('bar', $this->object->getOption('foo'));
    }

    /**
     * @covers Flower\View\Pane\Pane::getOptions
     */
    public function testGetOptions()
    {
        $this->assertEmpty($this->object->getOptions());
        $options = array('foo' => 'bar', 'bar' => 'baz');
        $this->object->setOptions($options);
        $this->assertEquals($options, $this->object->getOptions());
    }

    /**
     * @covers Flower\View\Pane\Pane::getFactoryClass
     */
    public function testGetFactoryClass()
    {
        $this->assertEquals('Flower\View\Pane\Factory\PaneFactory', Pane::getFactoryClass());
    }

    /**
     *
     * @covers Flower\View\Pane\Pane::hasContent
     */
    public function testHasContent()
    {
        $varRef = TestTool::getPropertyRef($this->object, 'var');
        $this->assertTrue($this->object->hasContent(), 'default var=content');
        $varRef->setValue($this->object, null);
        $this->assertFalse($this->object->hasContent(), 'var= null or not isset');
        $this->object->var = '';
        $this->assertFalse($this->object->hasContent(), 'var= ""');
        $this->object->var = false;
        $this->assertFalse($this->object->hasContent(), 'var= false');
        $this->object->var = array();
        $this->assertFalse($this->object->hasContent(), 'var= empty array is invalid');
        $this->object->var = '0';
        $this->assertTrue($this->object->hasContent(), 'var = "0" is valid');
    }

    /**
     * @covers Flower\View\Pane\Pane::setRegistry
     */
    public function testSetRegistry()
    {
        $registry = array('foo' => 'bar');
        $this->object->setRegistry($registry);
        $this->assertEquals($registry, TestTool::getPropertyValue($this->object, 'registry'));
    }

    /**
     * @depends testSetRegistry
     * @covers Flower\View\Pane\Pane::getRegistry
     */
    public function testGetRegistry()
    {
        $registry = array('foo' => 'bar');
        $this->object->setRegistry($registry);
        $this->assertEquals($registry, $this->object->getRegistry());
    }

    /**
     * @covers Flower\View\Pane\Pane::setSizeToClassFunction
     */
    public function testSetSizeToClassFunction()
    {
        $function = function ($size) {return (string) $size * 2;};
        $this->object->setSizeToClassFunction($function);
        $this->assertSame($function, TestTool::getPropertyValue($this->object, 'sizeToClassFunction'));
    }

    /**
     * @depends testSetSizeToClassFunction
     * @covers Flower\View\Pane\Pane::getSizeToClassFunction
     */
    public function testGetSizeToClassFunction()
    {
        $function = function ($size) {return (string) $size * 2;};
        $this->object->setSizeToClassFunction($function);
        $this->assertSame($function, $this->object->getSizeToClassFunction());
    }

    /**
     * @depends testSetSizeToClassFunction
     * @covers Flower\View\Pane\Pane::sizeToClass
     */
    public function testSizeToClass()
    {
        //default action  tw bootstrap 2
        $this->assertEquals('span1', $this->object->sizeToClass(1));

        //custom function
        $this->object->setSizeToClassFunction(function ($size) {return (string) ($size * 2);} );
        $this->assertEquals('4', $this->object->sizeToClass(2));
    }
}
