<?php
namespace Flower\View\Pane\PaneClass;

use Flower\View\Pane\Builder\Builder;
use Flower\View\Pane\Factory\ViewScriptPaneFactory;
use Flower\View\Pane\PaneClass\ViewScriptPane;
use Flower\View\Pane\PaneRenderer;
use Zend\View\Renderer\PhpRenderer;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-13 at 22:37:59.
 */
class ViewScriptPaneTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ViewScriptPane
     */
    protected $object;

    protected $builder;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->builder = new Builder(array('pane_class' => 'Flower\View\Pane\PaneClass\ViewScriptPane'));
        $this->object = new ViewScriptPane;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testNoViewScript()
    {
                $expected =
'<!-- begin Renderer -->
<div>
<div>
  <div id="foo">
  <!-- start content content -->
<!-- error: Zend\View\Renderer\PhpRenderer::render: Unable to render template &quot;content&quot;; resolver could not resolve to a file -->  <!-- end content content -->
  </div>
</div>
</div>
<!-- end Renderer -->
';
        $expected = str_replace("\r\n","\n", $expected);
        $paneConfig = array(
            'id' => 'foo',
            'var' => 'content', //コンテンツをキャンセル
        );
        $pane = ViewScriptPaneFactory::factory($paneConfig, $this->builder);
        $renderer = new PaneRenderer($pane);
        $renderer->setView(new PhpRenderer);
        $this->assertEquals($expected, str_replace("\r\n","\r", (string) $renderer));
    }

    public function testSimple()
    {
        $expected =
'<!-- begin Renderer -->
<div>
<div>
  <div id="foo">
  <!-- start content content -->
content.phtml  <!-- end content content -->
  </div>
</div>
</div>
<!-- end Renderer -->
';
        $expected = str_replace("\r\n","\n", $expected);
        $paneConfig = array(
            'id' => 'foo',
            'var' => 'content', //コンテンツをキャンセル
        );
        $pane = ViewScriptPaneFactory::factory($paneConfig, $this->builder);
        $view = new PhpRenderer;
        $view->resolver()->addPath(__DIR__ . '/TestAsset/view');
        $renderer = new PaneRenderer($pane);
        $renderer->setView($view);
        //コンテンツなし
        $this->assertEquals($expected, str_replace("\r\n","\r", (string) $renderer));
    }
}
