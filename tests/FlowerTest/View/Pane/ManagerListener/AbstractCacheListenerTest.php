<?php
namespace FlowerTest\View\Pane\ManagerListener;

use Flower\Test\TestTool;
use Flower\View\Pane\PaneEvent;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-13 at 10:04:15.
 */
class AbstractCacheListenerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractCacheListener
     */
    protected $object;

    protected $config;

    protected $storageOptions;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new TestAsset\ConcreteCacheListener;
        $this->config = require 'TestAsset/pane_cache_listener.config.php';
        $this->storageOptions = $this->config['pane_cache_listener']['cache_storage'];
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     */
    public function testSetStorageOptions()
    {
        $this->object->setStorageOptions($this->storageOptions);
        $this->assertEquals($this->storageOptions, TestTool::getPropertyValue($this->object, 'storageOptions'));
    }

    /**
     * @depends testSetStorageOptions
     */
    public function testGetStorageOptions()
    {
        $this->object->setStorageOptions($this->storageOptions);
        $this->assertEquals($this->storageOptions, $this->object->getStorageOptions());
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\AbstractCacheListener::setStorage
     */
    public function testSetStorage()
    {
        $storage = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $this->object->setStorage($storage);
        $this->assertSame($storage, TestTool::getPropertyValue($this->object, 'storage'));
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\AbstractCacheListener::getStorage
     */
    public function testGetStorage()
    {
        $this->assertNull($this->object->getStorage());
        $storage = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $this->object->setStorage($storage);
        $this->assertSame($storage, $this->object->getStorage());
    }

    public function testGetStorageWithOptions()
    {
        $this->assertNull($this->object->getStorage());
        $this->object->setStorageOptions($this->storageOptions);
        $storage = $this->object->getStorage();
        $this->assertInstanceOf('Zend\Cache\Storage\Adapter\FileSystem', $storage);
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\AbstractCacheListener::setSerializer
     */
    public function testSetSerializer()
    {
        $serializer = $this->getMock('Zend\Serializer\Adapter\AdapterInterface');
        $this->object->setSerializer($serializer);
        $this->assertSame($serializer, TestTool::getPropertyValue($this->object, 'serializer'));
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\AbstractCacheListener::getSerializer
     */
    public function testGetSerializer()
    {
        $serializer = $this->getMock('Zend\Serializer\Adapter\AdapterInterface');
        $this->object->setSerializer($serializer);
        $this->assertSame($serializer, $this->object->getSerializer());
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\AbstractCacheListener::refresh
     */
    public function testRefresh()
    {
        $paneId = 'foo';
        $storage = $this->getMock('Zend\Cache\Storage\Adapter\FileSystem');
        $storage->expects($this->once())
                ->method('removeItem')
                ->with($this->equalTo($paneId));
        $this->object->setStorage($storage);
        $this->object->refresh($paneId);
    }


    public function testRefreshFlush()
    {
        $storage = $this->getMock('Zend\Cache\Storage\Adapter\FileSystem');
        $storage->expects($this->once())
                ->method('flush');
        $this->object->setStorage($storage);
        $this->object->refresh();
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\AbstractCacheListener::onRefresh
     */
    public function testOnRefresh()
    {
        $paneId = 'foo';
        $storage = $this->getMock('Zend\Cache\Storage\Adapter\FileSystem');
        $storage->expects($this->once())
                ->method('removeItem')
                ->with($this->equalTo($paneId));
        $this->object->setStorage($storage);
        $event = new PaneEvent;
        $event->setPaneId($paneId);
        $this->object->onRefresh($event);
    }
}
