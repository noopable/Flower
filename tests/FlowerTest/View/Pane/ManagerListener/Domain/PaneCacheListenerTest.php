<?php
namespace FlowerTest\View\Pane\ManagerListener\Domain;

use Flower\Domain\Domain;
use Flower\Test\TestTool;
use Flower\View\Pane\PaneEvent;
use Flower\View\Pane\ManagerListener\Domain\PaneCacheListener;
use Zend\EventManager\EventManager;
use Zend\ServiceManager\ServiceManager;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-07 at 11:03:24.
 */
class PaneCacheListenerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PaneCacheListener
     */
    protected $object;

    protected $config;

    protected $storageOptions;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PaneCacheListener;
        $this->object->setServiceLocator(new ServiceManager);
        $this->config = require 'TestAsset/cache_listener.config.php';
        $this->storageOptions = $this->config['pane_cache_listener']['cache_storage'];
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::setStorageOptions
     */
    public function testSetStorageOptions()
    {
        $this->object->setStorageOptions($this->storageOptions);
        $this->assertEquals($this->storageOptions, TestTool::getPropertyValue($this->object, 'storageOptions'));
    }

    /**
     * @expectedException Flower\View\Pane\Exception\RuntimeException
     */
    public function testGetStorageOptionsWithoutDomainService()
    {
        $this->object->getStorageOptions();
    }

    /**
     * @expectedException Flower\View\Pane\Exception\RuntimeException
     */
    public function testGetStorageOptionsBeforeCurrentDomainIsSet()
    {
        $currentDomain = new Domain;
        $domainService = $this->getMock('Flower\Domain\Service');
        $domainService->expects($this->once())
                ->method('getCurrentDomain')
                ->will($this->returnValue($currentDomain));
        $this->object->setDomainService($domainService);
        $this->object->getStorageOptions();
    }

    /**
     * @depends testSetStorageOptions
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::getStorageOptions
     */
    public function testGetStorageOptions()
    {
        $currentDomain = new Domain;
        $currentDomain->setDomainId(123);
        $domainService = $this->getMock('Flower\Domain\Service');
        $domainService->expects($this->once())
                ->method('getCurrentDomain')
                ->will($this->returnValue($currentDomain));
        $this->object->setDomainService($domainService);
        $this->object->setStorageOptions($this->storageOptions);
        $expects = $this->storageOptions;
        $expects['adapter']['options']['namespace'] = 'd_123' . $expects['adapter']['options']['namespace'];
        $this->assertEquals($expects, $this->object->getStorageOptions());
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::setStorage
     */
    public function testSetStorage()
    {
        $storage = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $this->object->setStorage($storage);
        $this->assertSame($storage, TestTool::getPropertyValue($this->object, 'storage'));
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::getStorage
     */
    public function testGetStorage()
    {
        $this->assertNull($this->object->getStorage());
        $storage = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $this->object->setStorage($storage);
        $this->assertSame($storage, $this->object->getStorage());
    }

    public function testGetStorageWithOptions()
    {
        $currentDomain = new Domain;
        $currentDomain->setDomainId(123);
        $domainService = $this->getMock('Flower\Domain\Service');
        $domainService->expects($this->once())
                ->method('getCurrentDomain')
                ->will($this->returnValue($currentDomain));
        $this->object->setDomainService($domainService);

        $this->assertNull($this->object->getStorage());
        $this->object->setStorageOptions($this->storageOptions);
        $storage = $this->object->getStorage();
        $this->assertInstanceOf('Zend\Cache\Storage\Adapter\FileSystem', $storage);
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::setSerializer
     */
    public function testSetSerializer()
    {
        $serializer = $this->getMock('Zend\Serializer\Adapter\AdapterInterface');
        $this->object->setSerializer($serializer);
        $this->assertSame($serializer, TestTool::getPropertyValue($this->object, 'serializer'));
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::getSerializer
     */
    public function testGetSerializer()
    {
        $serializer = $this->getMock('Zend\Serializer\Adapter\AdapterInterface');
        $this->object->setSerializer($serializer);
        $this->assertSame($serializer, $this->object->getSerializer());
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::attach
     */
    public function testAttach()
    {
        $eventManager = new EventManager;
        $this->object->attach($eventManager);
        $listeners = $eventManager->getListeners(PaneEvent::EVENT_GET_PANE);
        $this->assertCount(2, $listeners);
        $this->assertSame(TestTool::getPropertyValue($this->object, 'listeners')[0], $listeners->top());
    }

    public function testPreGetModelCase()
    {
        $paneId = 'foo';
        $event = new PaneEvent(PaneEvent::EVENT_GET_PANE);
        $event->setPaneId($paneId);
        $event->setTarget($paneId);
        $serialized = '--';
        $pane = $this->getMock('Flower\View\Pane\PaneClass\Pane');
        $storage = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $storage->expects($this->once())
                ->method('hasItem')
                ->with($this->equalTo($paneId))
                ->will($this->returnValue(true));
        $storage->expects($this->once())
                ->method('getItem')
                ->with($this->equalTo($paneId))
                ->will($this->returnValue($serialized));
        $this->object->setStorage($storage);
        $serializer = $this->getMock('Zend\Serializer\Adapter\AdapterInterface');
        $serializer->expects($this->once())
                ->method('unserialize')
                ->with($this->equalTo($serialized))
                ->will($this->returnValue($pane));
        $this->object->setSerializer($serializer);
        $res = $this->object->preGet($event);
        $this->assertSame($pane, $res);
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::preGet
     */
    public function testPreGetWithStorageHasNoData()
    {
        $paneId = 'foo';
        $event = new PaneEvent(PaneEvent::EVENT_GET_PANE);
        $event->setPaneId($paneId);
        $event->setTarget($paneId);
        $storage = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $storage->expects($this->once())
                ->method('hasItem')
                ->with($this->equalTo($paneId))
                ->will($this->returnValue(false));
        $this->object->setStorage($storage);
        $res = $this->object->preGet($event);
        $this->assertFalse($event->hasError());
        $this->assertNull($res);
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::preGet
     */
    public function testPreGetWithStorageThrowsException()
    {
        $paneId = 'foo';
        $event = new PaneEvent(PaneEvent::EVENT_GET_PANE);
        $event->setPaneId($paneId);
        $event->setTarget($paneId);
        $storage = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $storage->expects($this->once())
                ->method('hasItem')
                ->with($this->equalTo($paneId))
                ->will($this->returnValue(true));
        $storage->expects($this->once())
                ->method('getItem')
                ->with($this->equalTo($paneId))
                ->will($this->throwException(new \Exception));
        $this->object->setStorage($storage);
        $res = $this->object->preGet($event);
        $this->assertTrue($event->hasError());
        $this->assertNull($res);
    }

    public function testPreGetSerializerThrowsException()
    {
        $paneId = 'foo';
        $event = new PaneEvent(PaneEvent::EVENT_GET_PANE);
        $event->setPaneId($paneId);
        $event->setTarget($paneId);
        $serialized = '--';
        $pane = $this->getMock('Flower\View\Pane\PaneClass\Pane');
        $storage = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $storage->expects($this->once())
                ->method('hasItem')
                ->with($this->equalTo($paneId))
                ->will($this->returnValue(true));
        $storage->expects($this->once())
                ->method('getItem')
                ->with($this->equalTo($paneId))
                ->will($this->returnValue($serialized));
        $this->object->setStorage($storage);
        $serializer = $this->getMock('Zend\Serializer\Adapter\AdapterInterface');
        $serializer->expects($this->once())
                ->method('unserialize')
                ->with($this->equalTo($serialized))
                ->will($this->throwException(new \Exception));
        $this->object->setSerializer($serializer);
        $res = $this->object->preGet($event);
        $this->assertTrue($event->hasError());
        $this->assertNull($res);
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::postGet
     */
    public function testPostGetModelCase()
    {
        $paneId = 'foo';
        $pane = $this->getMock('Flower\View\Pane\PaneClass\Pane');
        $event = new PaneEvent(PaneEvent::EVENT_GET_PANE);
        $event->setPaneId($paneId);
        $event->setResult($pane);
        $serialized = '--';

        $storage = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $storage->expects($this->once())
                ->method('setItem')
                ->with($this->equalTo($paneId), $this->equalTo($serialized));
        $this->object->setStorage($storage);

        $serializer = $this->getMock('Zend\Serializer\Adapter\AdapterInterface');
        $serializer->expects($this->once())
                ->method('serialize')
                ->with($this->equalTo($pane))
                ->will($this->returnValue($serialized));
        $this->object->setSerializer($serializer);

        $res = $this->object->postGet($event);
        $this->assertSame($pane, $res);
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::postGet
     */
    public function testPostGetEventHasError()
    {
        $paneId = 'foo';
        $pane = $this->getMock('Flower\View\Pane\PaneClass\Pane');
        $event = new PaneEvent(PaneEvent::EVENT_GET_PANE);
        $event->setPaneId($paneId);
        $event->setResult($pane);
        $event->addErrorMessage('error');
        $res = $this->object->postGet($event);
        $this->assertSame($pane, $res);
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::postGet
     */
    public function testPostGetWithoutStorage()
    {
        $paneId = 'foo';
        $pane = $this->getMock('Flower\View\Pane\PaneClass\Pane');
        $event = new PaneEvent(PaneEvent::EVENT_GET_PANE);
        $event->setPaneId($paneId);
        $event->setResult($pane);
        $res = $this->object->postGet($event);
        $this->assertSame($pane, $res);
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::postGet
     */
    public function testPostGetSerializerThrowsException()
    {
        $paneId = 'foo';
        $pane = $this->getMock('Flower\View\Pane\PaneClass\Pane');
        $event = new PaneEvent(PaneEvent::EVENT_GET_PANE);
        $event->setPaneId($paneId);
        $event->setResult($pane);

        $storage = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $storage->expects($this->never())->method('setItem');
        $this->object->setStorage($storage);

        $serializer = $this->getMock('Zend\Serializer\Adapter\AdapterInterface');
        $serializer->expects($this->once())
                ->method('serialize')
                ->with($this->equalTo($pane))
                ->will($this->throwException(new \Exception));
        $this->object->setSerializer($serializer);

        $res = $this->object->postGet($event);
        $this->assertTrue($event->hasError());
        $this->assertSame($pane, $res);
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::postGet
     */
    public function testPostGetStorageThrowsException()
    {
        $paneId = 'foo';
        $serialized = '--';
        $pane = $this->getMock('Flower\View\Pane\PaneClass\Pane');
        $event = new PaneEvent(PaneEvent::EVENT_GET_PANE);
        $event->setPaneId($paneId);
        $event->setResult($pane);

        $storage = $this->getMock('Zend\Cache\Storage\StorageInterface');
        $storage->expects($this->once())
                ->method('setItem')
                ->with($this->equalTo($paneId), $this->equalTo($serialized))
                ->will($this->throwException(new \Exception));
        $this->object->setStorage($storage);

        $serializer = $this->getMock('Zend\Serializer\Adapter\AdapterInterface');
        $serializer->expects($this->once())
                ->method('serialize')
                ->with($this->equalTo($pane))
                ->will($this->returnValue($serialized));
        $this->object->setSerializer($serializer);

        $res = $this->object->postGet($event);
        $this->assertTrue($event->hasError());
        $this->assertSame($pane, $res);
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::setDomainService
     */
    public function testSetDomainService()
    {
        $domainService = $this->getMock('Flower\Domain\Service');
        $this->object->setDomainService($domainService);
        $this->assertSame($domainService, TestTool::getPropertyValue($this->object, 'domainService'));
    }

    /**
     * @depends testSetDomainService
     * @covers Flower\View\Pane\ManagerListener\Domain\PaneCacheListener::getDomainService
     */
    public function testGetDomainService()
    {
        $domainService = $this->getMock('Flower\Domain\Service');
        $this->object->setDomainService($domainService);
        $this->assertSame($domainService, $this->object->getDomainService());
    }
}
