<?php
namespace FlowerTest\View\Pane\ManagerListener;

use Flower\Test\TestTool;
use Flower\View\Pane\PaneEvent;
use Flower\View\Pane\ManagerListener\ConfigFileListener;
use Zend\EventManager\EventManager;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-06 at 22:02:23.
 */
class ConfigFileListenerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ConfigFileListener
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ConfigFileListener;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\ConfigFileListener::setFileService
     */
    public function testSetFileService()
    {
        $fileService = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $this->object->setFileService($fileService);
        $this->assertSame($fileService, TestTool::getPropertyValue($this->object, 'fileService'));
    }

    /**
     * @depends testSetFileService
     * @covers Flower\View\Pane\ManagerListener\ConfigFileListener::getFileService
     */
    public function testGetFileService()
    {
        $fileService = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $this->object->setFileService($fileService);
        $this->assertSame($fileService, $this->object->getFileService());
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\ConfigFileListener::attach
     */
    public function testAttach()
    {
        $eventManager = new EventManager;
        $this->object->attach($eventManager);
        $listeners = $eventManager->getListeners(PaneEvent::EVENT_LOAD_CONFIG);
        $this->assertCount(1, $listeners);
        $this->assertSame(TestTool::getPropertyValue($this->object, 'listeners')[0], $listeners->top());
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\ConfigFileListener::onLoad
     */
    public function testOnLoadWithoutService()
    {
        $paneId = 'foo';
        $event = new PaneEvent(PaneEvent::EVENT_LOAD_CONFIG);
        $event->setPaneId($paneId);
        $event->setTarget('foo');
        $res = $this->object->onLoad($event);
        $this->assertNull($res);
    }

    /**
     * @covers Flower\View\Pane\ManagerListener\ConfigFileListener::onLoad
     */
    public function testOnLoad()
    {
        $paneId = 'foo';
        $expected = array('foo' => 'bar');
        $event = new PaneEvent(PaneEvent::EVENT_LOAD_CONFIG);
        $event->setPaneId($paneId);
        $event->setTarget('foo');
        $fileService = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $fileService->expects($this->once())
                ->method('read')
                ->with($this->equalTo($paneId))
                ->will($this->returnValue($expected));
        $this->object->setFileService($fileService);
        $res = $this->object->onLoad($event);
        $this->assertEquals($expected, $res);
        $this->assertEquals($expected, $event->getResult());
    }

    public function testOnRefresh()
    {
        $paneId = 'foo';
        $event = new PaneEvent(PaneEvent::EVENT_REFRESH_CONFIG);
        $event->setPaneId($paneId);
        $fileService = $this->getMock('Flower\File\Gateway\GatewayInterface');
        $fileService->expects($this->once())
                ->method('refresh')
                ->with($this->equalTo($paneId));
        $this->object->setFileService($fileService);
        $res = $this->object->onRefresh($event);
    }
}
