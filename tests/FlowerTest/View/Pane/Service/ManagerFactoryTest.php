<?php
namespace FlowerTest\View\Pane\Service;

use Flower\View\Pane\Service\ManagerFactory;
use Zend\ServiceManager\ServiceManager;
use Zend\View\HelperPluginManager;
use Zend\View\Renderer\PhpRenderer;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-06 at 08:21:35.
 */
class ManagerFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ManagerFactory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ManagerFactory;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\View\Pane\Service\ManagerFactory::createService
     */
    public function testCreateServiceSimple()
    {
        $config = array(
            'flower_pane_manager' => array(),
        );
        $serviceLocator = new ServiceManager();
        $serviceLocator->setService('Config', $config);
        $helperPluginManager = new HelperPluginManager;
        $helperPluginManager->setServiceLocator($serviceLocator);
        $manager = $this->object->createService($helperPluginManager);
        $this->assertInstanceOf('Flower\View\Pane\PaneManager', $manager);
    }

    public function testCreateServiceCustomized()
    {
        $config = array(
            'flower_pane_manager' => array(
                'pane_config' => array(
                    'foo' => array(
                        'pane_class' => 'Flower\View\Pane\PaneClass\Anchor',
                        'classes' => 'container',
                        'var' => 'Link Label 1',// this will be omitted
                        'inner' => array(
                            'classes' => 'main',
                            'var' => 'Link Label 1.1',
                            'inner' => array(
                                'classes' => 'main',
                                'var' => 'Link Label 1.1.1',
                            ),
                        ),
                    ),
                ),
                'builder_options' => array(
                    'builder_class' => 'Flower\View\Pane\Builder\Builder',
                    'pane_class' => 'Flower\View\Pane\PaneClass\Pane',
                ),
                'renderer_class' => 'Flower\View\Pane\PaneRenderer',
                'listenerAggregates' => array(
                    'FlowerTest\View\Pane\Service\TestAsset\MockListenerAggregate',
                ),
            ),
        );
        $serviceLocator = new ServiceManager();
        $serviceLocator->setService('Config', $config);
        $helperPluginManager = new HelperPluginManager;
        $helperPluginManager->setServiceLocator($serviceLocator);
        $manager = $this->object->createService($helperPluginManager);
        $this->assertInstanceOf('Flower\View\Pane\PaneManager', $manager);
    }

    public function testCreateServiceCustomizedCanGetCustomizedPane()
    {
        $config = array(
            'flower_pane_manager' => array(
                'pane_config' => array(
                    'foo' => array(
                        'pane_class' => 'Flower\View\Pane\PaneClass\Anchor',
                        'classes' => 'container',
                        'var' => 'Link Label 1',// this will be omitted
                        'inner' => array(
                            'classes' => 'main',
                            'var' => 'Link Label 1.1',
                            'inner' => array(
                                'classes' => 'main',
                                'var' => 'Link Label 1.1.1',
                            ),
                        ),
                    ),
                ),
                'builder_options' => array(
                    'builder_class' => 'Flower\View\Pane\Builder\Builder',
                    'pane_class' => 'Flower\View\Pane\PaneClass\Pane',
                ),
                'renderer_class' => 'Flower\View\Pane\PaneRenderer',
                'listenerAggregates' => array(
                    'FlowerTest\View\Pane\Service\TestAsset\MockListenerAggregate',
                ),
            ),
        );
        $expected = '<!-- begin Renderer -->
<ul>
<li>
  <span class="container">Link Label 1</span>
<ul>
  <li>
    <span class="main">Link Label 1.1</span>
  <ul>
    <!-- start content CallbackRender -->
    <li>
    <span class="main">Link Label 1.1.1</span>
    </li>
    <!-- end content CallbackRender -->
  </ul>
  </li>
</ul>
</li>
</ul>
<!-- end Renderer -->
';
        $serviceLocator = new ServiceManager();
        $serviceLocator->setService('Config', $config);
        $helperPluginManager = new HelperPluginManager;
        $helperPluginManager->setServiceLocator($serviceLocator);
        $manager = $this->object->createService($helperPluginManager);
        //In mvc, helperPluginManager's initializer inject renderer via setView
        $manager->setView(new PhpRenderer);
        $this->assertInstanceOf('Flower\View\Pane\PaneManager', $manager);
        $pane = $manager->get('foo');
        $this->assertInstanceOf('Flower\View\Pane\PaneClass\Anchor', $pane);
        $res = $manager->render('foo');
        $this->assertEquals(str_replace("\r\n", "\n", $expected), $res);
    }

}
