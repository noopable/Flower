<?php
namespace FlowerTest\View\Pane\Service;

use Flower\Test\TestTool;
use Flower\View\Pane\PaneEvent;
use Flower\View\Pane\Service\ConfigFileListenerFactory;
use FlowerTest\Bootstrap;
use Zend\Cache\StorageFactory;
use Zend\ServiceManager\ServiceManager;
use Zend\Mvc\Service\ServiceManagerConfig;
use Zend\View\Renderer\PhpRenderer;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-06 at 23:02:41.
 */
class ManagerFactoryIntegrationTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ConfigFileListenerFactory
     */
    protected $object;

    protected $serviceLocator;

    protected $cacheStorage;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $config = Bootstrap::getServiceManager()->get('ApplicationConfig');
        if (!isset($config['module_listener_options']['config_static_paths'])) {
            $config['module_listener_options']['config_static_paths'] = array();
        }
        $config['module_listener_options']['config_static_paths'][] = __DIR__ . '/TestAsset/manager_integration.config.php';
        $serviceManager = new ServiceManager(new ServiceManagerConfig);
        $serviceManager->setService('ApplicationConfig', $config);
        $serviceManager->get('ModuleManager')->loadModules();
        $serviceManager->get('Application')->bootstrap();
        $this->serviceLocator = $serviceManager;
        $this->helperManager = $this->serviceLocator->get('ViewHelperManager');
        $this->view = new PhpRenderer;
        $this->view->setHelperPluginManager($this->helperManager);
        $this->manager = $this->view->plugin('npPaneManager');
        $this->getCacheStorage();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    protected function getCacheStorage()
    {
        if (isset($this->cacheStorage)) {
            return $this->cacheStorage;
        }
        $options = include 'TestAsset/test_cache_options.php';
        if (isset($options['cache_storage']['adapter']['options']['cache_dir'])) {
            $dir = realpath($options['cache_storage']['adapter']['options']['cache_dir']);
            if (strpos($dir, __DIR__) !== 0) {
                throw \Exception('invalid cache dir');
            }
        }
        $this->cacheStorage = StorageFactory::factory($options['cache_storage']);
        return $this->cacheStorage;
    }

    public function testCanGetPaneManager()
    {
        $this->assertInstanceOf('Flower\View\Pane\PaneManager', $this->manager);
    }

    public function testCanGetPaneInConfig()
    {
        $pane = $this->manager->get('bar');
        $this->assertInstanceOf('Flower\View\Pane\PaneClass\PaneInterface', $pane);
        $res = $this->manager->render('bar');
        $expected = '<!-- begin Renderer -->
<ul>
<li>
  <span class="container">Link Label 1</span>
<ul>
  <li>
    <span class="main">Link Label 1.1</span>
  <ul>
    <!-- start content CallbackRender -->
    <li>
    <span class="main">Link Label 1.1.1</span>
    </li>
    <!-- end content CallbackRender -->
  </ul>
  </li>
</ul>
</li>
</ul>
<!-- end Renderer -->
';
        $this->assertEquals(str_replace("\r\n", "\n", $expected), $res);
        //private teardown
        $this->getCacheStorage()->removeItem('bar');
    }

    public function testCanGetPaneInFile()
    {
        $pane = $this->manager->get('foo');
        $this->assertInstanceOf('Flower\View\Pane\PaneClass\PaneInterface', $pane);
        $res = $this->manager->render('foo');
        $expected = '<!-- begin Renderer -->
<div id="foo">
</div>
<!-- end Renderer -->
';
        $this->assertEquals(str_replace("\r\n", "\n", $expected), $res);

        //private teardown
        $this->getCacheStorage()->removeItem('foo');
    }

    public function testEventListnerIsAttached()
    {
        $eventManager = $this->manager->getEventManager();
        $listeners = $eventManager->getListeners(PaneEvent::EVENT_GET_PANE);
        $this->assertEquals(2, $listeners->count());
    }
}
