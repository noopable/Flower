<?php
namespace FlowerTest\View\Pane;

use Flower\Test\TestTool;
use Flower\View\Pane\Builder;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-20 at 20:33:18.
 */
class BuilderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Builder
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Builder;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\View\Pane\Builder::setPaneClass
     */
    public function testSetPaneClassString()
    {
        $class = 'Flower\View\Pane\Pane';
        $this->object->setPaneClass($class);
        $this->assertEquals($class, TestTool::getPropertyValue($this->object, 'paneClass'));
    }

    /**
     * @covers Flower\View\Pane\Builder::setPaneClass
     */
    public function testSetPaneClassByObject()
    {
        $object = $this->getMock('Flower\View\Pane\PaneInterface');
        $this->object->setPaneClass($object);
        $this->assertEquals(get_class($object), TestTool::getPropertyValue($this->object, 'paneClass'));
    }

    /**
     * @covers Flower\View\Pane\Builder::build
     */
    public function testBuildDefaultPane()
    {
        $paneConfig = array('tag' => '','inner' => array('classes' => 'container'));
        $pane = $this->object->build($paneConfig);

        $this->assertFalse($pane->hasChildren());
        $children = $pane->current();
        $this->assertInstanceOf('Flower\View\Pane\PaneInterface', $children);
    }

    /**
     * @covers Flower\View\Pane\Builder::build
     */
    public function testBuildFilteredTagValues()
    {
        $paneConfig = array('tag' => '-%-44dあｲi^%v','inner' => array('classes' => 'container'));
        $pane = $this->object->build($paneConfig);

        $this->assertFalse($pane->hasChildren());
        $this->assertEquals('div', $pane->tag);
        $children = $pane->current();
        $this->assertInstanceOf('Flower\View\Pane\PaneInterface', $children);
    }

    /**
     * @covers Flower\View\Pane\Builder::build
     */
    public function testBuildCustomPane()
    {
        $paneConfig = array(
            'tag' => '',
            'inner' => array(
                'classes' => 'container',
                'pane_class' => 'FlowerTest\View\Pane\TestAsset\YetAnotherPane',
            ),
        );
        $pane = $this->object->build($paneConfig);

        $this->assertFalse($pane->hasChildren());
        $children = $pane->current();
        $this->assertInstanceOf('Flower\View\Pane\PaneInterface', $pane);
        $this->assertInstanceOf('FlowerTest\View\Pane\TestAsset\YetAnotherPane', $children);
    }

    /**
     * @covers Flower\View\Pane\Builder::build
     * @expectedException Flower\View\Pane\Exception\PaneClassNotFoundException
     */
    public function testBuildNotExistsCustomPane()
    {
        $paneConfig = array(
            'tag' => '',
            'inner' => array(
                'classes' => 'container',
                'pane_class' => 'dummy',
            ),
        );
        $pane = $this->object->build($paneConfig);
    }

    /**
     * @covers Flower\View\Pane\Builder::build
     * @expectedException Flower\View\Pane\Exception\RuntimeException
     */
    public function testBuildInvalidCustomPane()
    {
        $paneConfig = array(
            'tag' => '',
            'inner' => array(
                'classes' => 'container',
                'pane_class' => 'stdClass',
            ),
        );
        $this->object->build($paneConfig);
    }

    /**
     * @covers Flower\View\Pane\Builder::build
     */
    public function testBuildOptions()
    {
        $paneConfig = array('options' =>
            array(
                'foo' => new \stdClass,
                'bar' => 'baz',
            ));
        $pane = $this->object->build($paneConfig);

        $this->assertInstanceOf('stdClass', $pane->getOption('foo'));
        $this->assertEquals('baz', $pane->getOption('bar'));
    }
   /**
     * @covers Flower\View\Pane\Builder::build
     */
    public function testBuildVariousClassesOrAttributes()
    {
        $paneConfig = array(
            'classes' => 'container row 2003\'s',
            'attributes' => array(
                'foo' => 'bar',
                'baz' => '2003\'s',
            ),
            'inner' => array(
                'classes' => 'content'
            ));
        $pane = $this->object->build($paneConfig);

        $this->assertFalse($pane->hasChildren());
        $this->assertEquals(array('container', 'row', '2003&#039;s'), $pane->classes);
        $this->assertEquals(array('foo' => 'bar', 'baz' => '2003&#039;s'), $pane->attributes);
        $children = $pane->current();
        $this->assertInstanceOf('Flower\View\Pane\PaneInterface', $children);
    }
    /**
     * @covers Flower\View\Pane\Builder::getNewPane
     */
    public function testGetNewPane()
    {
        $res = $this->object->getNewPane();
        $this->assertInstanceOf('Flower\View\Pane\PaneInterface', $res);
    }

    public function testAddHtmlClass()
    {
        $reflection = new \ReflectionClass('Flower\View\Pane\Builder');
        $method = $reflection->getMethod('addHtmlClass');
        $method->setAccessible(true);
        $attributes = array();

        $method->invokeArgs($this->object, array('foo', &$attributes));
        $this->assertEquals('foo', $attributes['class']);

        //invoke twice
        $method->invokeArgs($this->object, array('bar', &$attributes));
        $this->assertEquals('foo bar', $attributes['class']);
    }

    public function testSizeToClass()
    {

        $reflection = new \ReflectionClass('Flower\View\Pane\Builder');
        $method = $reflection->getMethod('sizeToClass');
        $method->setAccessible(true);
        $property = $reflection->getProperty('sizeToClassFunction');
        $property->setAccessible(true);

        //default action  tw bootstrap 2
        $string1 = $method->invokeArgs($this->object, array(1));
        $this->assertEquals('span1', $string1);

        //custom function
        $property->setValue($this->object, function ($size) {return (string) ($size * 2);} );
        $string2 = $method->invokeArgs($this->object, array(2));
        $this->assertEquals('4', $string2);
    }

}
