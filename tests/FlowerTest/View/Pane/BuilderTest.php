<?php
namespace FlowerTest\View\Pane;

use Flower\Test\TestTool;
use Flower\View\Pane\Pane;
use Flower\View\Pane\PaneEvent;
use Flower\View\Pane\Builder;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-20 at 20:33:18.
 */
class BuilderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Builder
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Builder;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Flower\View\Pane\Builder::setPaneClass
     */
    public function testSetPaneClassString()
    {
        $class = 'Flower\View\Pane\Pane';
        $this->object->setPaneClass($class);
        $this->assertEquals($class, TestTool::getPropertyValue($this->object, 'paneClass'));
    }

    /**
     * @covers Flower\View\Pane\Builder::setPaneClass
     */
    public function testSetPaneClassByObject()
    {
        $object = new Pane;
        $this->object->setPaneClass($object);
        $this->assertEquals(get_class($object), TestTool::getPropertyValue($this->object, 'paneClass'));
    }

    /**
     * @covers Flower\View\Pane\Builder::build
     */
    public function testBuildDefaultPane()
    {
        $paneConfig = array('tag' => '','inner' => array('classes' => 'container'));
        $pane = $this->object->build($paneConfig);

        $this->assertFalse($pane->hasChildren());
        $children = $pane->current();
        $this->assertInstanceOf('Flower\View\Pane\PaneInterface', $children);
    }

    public function testBuildComplexCase()
    {
        $paneConfig =
        array(
            'id' => 'a0',
            'wrapTag' => 'div',
            'classes' => 'container',
            'tag' => 'span',//no affection because:RecursiveIteratorIterator::LEAVES_ONLY
            'var' => 'foo',
            'inner' => array(
                array(
                    'id' => 'a1',
                    'classes' => 'main',
                    'wrapTag' => 'div',//no affection because: inner pane has no children
                    'tag' => 'span',
                    'var' => 'varName',
                    'inner' => array(
                        array(
                            'id' => 'a1.1',
                            'classes' => 'main',
                            'wrapTag' => 'div',//no affection because: inner pane has no children
                            'tag' => 'span',
                            'var' => 'varName',
                        ),
                        array(
                            'id' => 'a1.2',
                            'classes' => 'main',
                            'wrapTag' => 'div',//no affection because: inner pane has no children
                            'tag' => 'p',
                            'var' => 'foo',
                        )
                    ),
                ),
                array(
                    'order' => 100,
                    'id' => 'a2',
                    'classes' => 'main',
                    'wrapTag' => 'div',//no affection because: inner pane has no children
                    'tag' => 'p',
                    'var' => 'foo',
                ),
            ),
        );
        $pane = $this->object->build($paneConfig);
        $this->assertCount(2, $pane);
    }

    /**
     * @see PaneFactoryTest
     * @covers Flower\View\Pane\Builder::build
     */
    public function testBuildFilteredTagValues()
    {
        $paneConfig = array('tag' => '-%-44dあｲi^%v', 'inner' => array('classes' => 'container'));
        $pane = $this->object->build($paneConfig);

        $this->assertFalse($pane->hasChildren());
        $this->assertEquals('div', $pane->tag);
        $children = $pane->current();
        $this->assertInstanceOf('Flower\View\Pane\PaneInterface', $children);
    }

    /**
     * @covers Flower\View\Pane\Builder::build
     */
    public function testBuildCustomPane()
    {
        $paneConfig = array(
            'tag' => '',
            'inner' => array(
                'classes' => 'container',
                'pane_class' => 'FlowerTest\View\Pane\TestAsset\YetAnotherPane',
            ),
        );
        $pane = $this->object->build($paneConfig);

        $this->assertFalse($pane->hasChildren());
        $children = $pane->current();
        $this->assertInstanceOf('Flower\View\Pane\PaneInterface', $pane);
        $this->assertInstanceOf('FlowerTest\View\Pane\TestAsset\YetAnotherPane', $children);
    }

    /**
     * @covers Flower\View\Pane\Builder::build
     * @expectedException Flower\View\Pane\Exception\PaneClassNotFoundException
     */
    public function testBuildNotExistsCustomPane()
    {
        $paneConfig = array(
            'tag' => '',
            'inner' => array(
                'classes' => 'container',
                'pane_class' => 'dummy',
            ),
        );
        $pane = $this->object->build($paneConfig);
    }

    /**
     * @covers Flower\View\Pane\Builder::build
     * @expectedException Flower\View\Pane\Exception\RuntimeException
     */
    public function testBuildInvalidCustomPane()
    {
        $paneConfig = array(
            'tag' => '',
            'inner' => array(
                'classes' => 'container',
                'pane_class' => 'stdClass',
            ),
        );
        $this->object->build($paneConfig);
    }

    /**
     * @covers Flower\View\Pane\Builder::build
     */
    public function testBuildOptions()
    {
        $paneConfig = array('options' =>
            array(
                'foo' => new \stdClass,
                'bar' => 'baz',
            ));
        $pane = $this->object->build($paneConfig);

        $this->assertInstanceOf('stdClass', $pane->getOption('foo'));
        $this->assertEquals('baz', $pane->getOption('bar'));
    }
   /**
     * @covers Flower\View\Pane\Builder::build
     */
    public function testBuildVariousClassesOrAttributes()
    {
        $paneConfig = array(
            'classes' => 'container row 2003\'s',
            'attributes' => array(
                'foo' => 'bar',
                'baz' => '2003\'s',
            ),
            'inner' => array(
                'classes' => 'content'
            ));
        $expected = '<div foo="bar" baz="2003&#x27;s" class="container row 2003&#x27;s">';
        $pane = $this->object->build($paneConfig);

        $this->assertFalse($pane->hasChildren());
        $this->assertEquals('container row 2003\'s', $pane->classes);
        $this->assertEquals(array('foo' => 'bar', 'baz' => '2003\'s'), $pane->attributes);
        $children = $pane->current();
        $this->assertEquals($expected, trim($pane->begin()));
        $this->assertInstanceOf('Flower\View\Pane\PaneInterface', $children);

    }

    /**
     * @covers Flower\View\Pane\Builder::setDefaultPaneFactory
     */
    public function testSetDefaultPaneFactory()
    {
        $factory = 'Flower\View\Pane\PaneFactory';
        $this->object->setDefaultPaneFactory($factory);
        $this->assertEquals($factory, TestTool::getPropertyValue($this->object, 'defaultPaneFactory'));
    }

    /**
     * @covers Flower\View\Pane\Builder::getDefaultPaneFactory
     */
    public function testGetDefaultPaneFactory()
    {
        $factory = 'Flower\View\Pane\PaneFactory';
        $this->object->setDefaultPaneFactory($factory);
        $this->assertEquals($factory, $this->object->getDefaultPaneFactory());
    }

    /**
     * @covers Flower\View\Pane\Builder::onBuild
     */
    public function testOnBuild()
    {
        $event = new PaneEvent(PaneEvent::EVENT_BUILD_PANE);
        $paneConfig = array(
            'tag' => '',
            'inner' => array(
                'classes' => 'container',
                'pane_class' => 'FlowerTest\View\Pane\TestAsset\YetAnotherPane',
            ),
        );
        $event->setParams($paneConfig);
        $event->setTarget('testPane');

        $pane = $this->object->onBuild($event);

        $this->assertSame($pane, $event->getTarget());
        $this->assertFalse($pane->hasChildren());
        $children = $pane->current();
        $this->assertInstanceOf('Flower\View\Pane\PaneInterface', $pane);
        $this->assertInstanceOf('FlowerTest\View\Pane\TestAsset\YetAnotherPane', $children);
    }
}
