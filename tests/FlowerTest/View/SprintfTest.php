<?php
namespace FlowerTest\View;
/*
 *
 *
 * @copyright Copyright (c) 2013-2013 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */
use Flower\View\Sprintf;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-04 at 17:36:34.
 */
class SprintfTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Sprintf
     */
    protected $object;
    
    /**
     *
     * @var \ReflectionObject
     */
    protected $ref;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Sprintf;
        $this->ref    = new \ReflectionObject($this->object);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testIsStringConversive()
    {
        $method = $this->ref->getMethod('isStringConversive');
        $method->setAccessible(true);
        $string = 'foo';
        $this->assertTrue($method->invoke($this->object, $string));
        $object = new Sprintf;
        $this->assertTrue($method->invoke($this->object, $object));
    }
    
    /**
     * @covers Flower\View\Sprintf::setFormat
     */
    public function testSetFormat() {
        $format = 'This is format';
        $this->object->setFormat($format);
        $property = $this->ref->getProperty('format');
        $property->setAccessible(true);
        $this->assertEquals($format, $property->getValue($this->object));
    }

    /**
     * @covers Flower\View\Sprintf::addParam
     */
    public function testAddParam() {
        $param1 = 'param1';
        $param2 = 2;
        $property = $this->ref->getProperty('params');
        $property->setAccessible(true);
        
        $this->object->addParam($param1);
        
        $this->assertEquals([$param1], $property->getValue($this->object));
        
        $this->object->addParam($param2);
        
        $this->assertEquals([$param1, $param2], $property->getValue($this->object));
        
    }

    /**
     * @covers Flower\View\Sprintf::setParams
     */
    public function testSetParams() {
        $param1 = 'param1';
        $param2 = 2;
        $property = $this->ref->getProperty('params');
        $property->setAccessible(true);
        
        $this->object->setParams([$param1, $param2]);
        
        $this->assertEquals([$param1, $param2], $property->getValue($this->object));
    }

    /**
     * @covers Flower\View\Sprintf::mergeParams
     */
    public function testMergeParams() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This is deprecated.'
        );
    }

    /**
     * @covers Flower\View\Sprintf::__toString
     */
    public function test__toString() {
        $format = '%s %d';
        $param1 = 'foo';
        $param2 = 5;
        $this->object->setFormat($format);
        $this->object->addParam($param1);
        $this->object->addParam($param2);
        
        $this->assertEquals('foo 5', (string) $this->object);
    }
    
    public function testNest__toString()
    {
        $object2 = new Sprintf;
        $formatChild  = '%s %d';
        $formatNested = '%s %s';
        $param1 = 'foo';
        $param2 = 5;
        $param3 = 'This is';
        
        $object2->setFormat($formatChild);
        $object2->addParam($param1);
        $object2->addParam($param2);
        
        $this->object->setFormat($formatNested);
        $this->object->addParam($param3);
        $this->object->addParam($object2);
        
        $this->assertEquals('This is foo 5', (string) $this->object);
        
    }
    
    public function testParamsSetByConstructor()
    {
        $object = new Sprintf('%s %d', 'foo', 5);
        $this->assertEquals('foo 5', (string) $object);
    }

    public function testFactoryFromArray()
    {
        $config = array(
            'This is %s %d',
            array(
                '%s %s',
                'foo',
                'bar',
            ),
            10,
        );
        $object = Sprintf::factoryFromArray($config);
        
        $this->assertEquals('This is foo bar 10', (string) $object);
    }
}
